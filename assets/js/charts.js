// Generated by CoffeeScript 1.6.1
(function() {
  var Hash5Charts, Hash5GoogleCharts, Hash5Knobs, Hash5Sparks, chart1, chart2, chart3, chart4, chart5, chart6, chart7, chart8, chart9, curDay, curMonth, curYear, estados, gauge1, gauge2, gauge3, i, knob1, knob2, knob3, months, periodos, selectedState, spark1, spark2, tableAlerta, tableNuvens, tableProdes, today, totalPeriodos, _i,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  Hash5Charts = (function() {

    function Hash5Charts(options) {
      var defaultOptions;
      defaultOptions = {
        type: null,
        container: null,
        period: 1,
        started: true,
        title: "",
        defaultClass: "",
        selects: void 0,
        resizing: 0,
        buttons: {
          minusplus: false,
          arrows: false,
          minimize: false,
          maximize: false,
          close: false
        }
      };
      this.options = $.extend(defaultOptions, options);
    }

    Hash5Charts.prototype.createContainer = function() {
      var container, html,
        _this = this;
      container = document.getElementById(this.options.container);
      html = "<div class=\"chart-header\">";
      html += "<div class=\"btn-group chart-icon btn-left\"></div>";
      html += "<h2>" + this.options.title + "</h2>";
      html += "<div class=\"btn-group chart-icon btn-right\"></div></div>";
      html += "<div id=\"chart-" + this.options.container + "\" class=\"chart-content\"></div>";
      $(container).append(html);
      if (this.options.buttons.minusplus) {
        html = "<span class=\"break\"></span>";
        $(container).children().children("h2").prepend(html);
        html = "<button id=\"" + this.options.container + "-btn-minus\" class=\"btn\"> <i class=\"icon-minus\"></i> </button>";
        html += "<button id=\"" + this.options.container + "-btn-plus\" class=\"btn\"> <i class=\"icon-plus\"></i> </button>";
        $(container).children().children(".btn-left").append(html);
        this.delBtn = document.getElementById(this.options.container + "-btn-minus");
        this.addBtn = document.getElementById(this.options.container + "-btn-plus");
      } else if (this.options.buttons.arrows) {
        html = "<span class=\"break\"></span>";
        $(container).children().children("h2").prepend(html);
        html = "<button id=\"" + this.options.container + "-btn-left\" class=\"btn\"> <i class=\"icon-arrow-left\"></i> </button>";
        html += "<button id=\"" + this.options.container + "-btn-right\" class=\"btn\"> <i class=\"icon-arrow-right\"></i> </button>";
        $(container).children().children(".btn-left").append(html);
        this.leftBtn = document.getElementById(this.options.container + "-btn-left");
        this.rightBtn = document.getElementById(this.options.container + "-btn-right");
      } else if (this.options.selects != null) {
        html = "<span class=\"break\"></span>";
        $(container).children().children("h2").prepend(html);
        html = "<form name=\"form-" + this.options.container + "\" class=\"form-inline\" action=\"\">";
        $.each(this.options.selects, function(name, data) {
          html += "<select id=\"slct-" + name + "\" class=\"input-mini\" name=\"" + name + "\">";
          $.each(data, function(key, value) {
            return html += "<option value=" + key + ">" + value + "</option>";
          });
          return html += "</select>";
        });
        $(container).children().children(".btn-left").append(html);
        $(container).children().children(".btn-left").removeClass("btn-group");
        $.each(this.options.selects, function(name, data) {
          _this[name + "Slct"] = document["form-" + _this.options.container][name];
          return _this.enableSelect("#slct-" + name + "");
        });
      }
      if (this.options.buttons.minimize) {
        html = "<button id=\"" + this.options.container + "-min\" class=\"btn btn-minimize\"><i class=\"icon-chevron-up\"></i></button>";
        $(container).children().children(".btn-right").append(html);
        this.minBtn = document.getElementById(this.options.container + "-min");
        this.enableMinimize(container);
      }
      if (this.options.buttons.maximize) {
        html = "<button id=\"" + this.options.container + "-max\" class=\"btn btn-maximize\"><i class=\"icon-resize-full\"></i></button>";
        $(container).children().children(".btn-right").append(html);
        this.maxBtn = document.getElementById(this.options.container + "-max");
        this.enableMaximize(container);
      }
      if (this.options.buttons.close) {
        html = "<button id=\"" + this.options.container + "-close\" class=\"btn btn-close\"><i class=\"icon-remove\"></i></button>";
        $(container).children().children(".btn-right").append(html);
        this.closeBtn = document.getElementById(this.options.container + "-close");
        return this.enableClose(container);
      }
    };

    Hash5Charts.prototype.createMinimalContainer = function() {
      var container, html;
      container = document.getElementById(this.options.container);
      html = "<div id=\"chart-" + this.options.container + "\" class=\"chart-content-small\"></div>";
      return $(container).append(html);
    };

    Hash5Charts.prototype.changeTitle = function(title) {
      var container, html;
      container = $("#" + this.options.container + " h2");
      container.html(title);
      if (this.options.buttons.arrows || this.options.buttons.minusplus || (this.options.selects != null)) {
        html = "<span class=\"break\"></span>";
        return container.prepend(html);
      }
    };

    Hash5Charts.prototype.enableMinimize = function(container) {
      var _this = this;
      return $(this.minBtn).on("click", function(event) {
        var $content;
        event.preventDefault();
        $content = $(container).children().next(".chart-content");
        if ($content.is(":visible")) {
          $(_this.minBtn).children().removeClass("icon-chevron-up").addClass("icon-chevron-down");
          if (_this.options.buttons.minusplus) {
            $(_this.addBtn).prop("disabled", true);
            $(_this.delBtn).prop("disabled", true);
          } else if (_this.options.buttons.arrows) {
            $(_this.leftBtn).prop("disabled", true);
            $(_this.rightBtn).prop("disabled", true);
          }
        } else {
          $(_this.minBtn).children().removeClass("icon-chevron-down").addClass("icon-chevron-up");
          if (_this.options.buttons.minusplus) {
            $(_this.addBtn).prop("disabled", false);
            $(_this.delBtn).prop("disabled", false);
          } else if (_this.options.buttons.arrows) {
            $(_this.leftBtn).prop("disabled", false);
            $(_this.rightBtn).prop("disabled", false);
          }
        }
        return $content.slideToggle();
      });
    };

    Hash5Charts.prototype.enableMaximize = function(container) {
      var _this = this;
      return $(this.maxBtn).on("click", function(event) {
        var content;
        event.preventDefault();
        if ($(_this.maxBtn).children()[0].className === 'icon-resize-full') {
          _this.defaultClass = $(container)[0].className;
          $(_this.minBtn).prop("disabled", true);
          $(_this.closeBtn).prop("disabled", true);
          $(_this.maxBtn).children().prop("class", "icon-resize-small");
          $("#navbar").hide();
        } else {
          $(_this.minBtn).prop("disabled", false);
          $(_this.closeBtn).prop("disabled", false);
          $(_this.maxBtn).children().prop("class", "icon-resize-full");
          $("#navbar").show();
        }
        $(container).toggleClass(_this.defaultClass);
        $(container).toggleClass("chart-overlay");
        content = $(container).children().next(".chart-content");
        content.toggleClass("chart-content-overlay");
        content.hide();
        content.fadeToggle(500);
        return _this.drawChart();
      });
    };

    Hash5Charts.prototype.enableClose = function(container) {
      var _this = this;
      return $(this.closeBtn).on("click", function(event) {
        event.preventDefault();
        return $(container).hide("slide", {}, '600');
      });
    };

    Hash5Charts.prototype.enableSelect = function(container) {
      var _this = this;
      return $(container).on("change", function(event) {
        return _this.drawChart();
      });
    };

    return Hash5Charts;

  })();

  Hash5GoogleCharts = (function(_super) {

    __extends(Hash5GoogleCharts, _super);

    function Hash5GoogleCharts() {
      return Hash5GoogleCharts.__super__.constructor.apply(this, arguments);
    }

    Hash5GoogleCharts.prototype.dataTable = function() {
      return this.data = new google.visualization.DataTable();
    };

    Hash5GoogleCharts.prototype.createChart = function() {
      if (this.options.type === "Gauge") {
        this.chart = new google.visualization.Gauge(document.getElementById("chart-" + this.options.container));
      } else {
        this.chart = new google.visualization[this.options.type + "Chart"](document.getElementById("chart-" + this.options.container));
      }
      this.options.started = false;
      return this.detectScreenChanges();
    };

    Hash5GoogleCharts.prototype.detectScreenChanges = function() {
      var orientationEvent, supportsOrientationChange,
        _this = this;
      supportsOrientationChange = "onorientationchange" in window;
      orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
      return window.addEventListener(orientationEvent, (function() {
        return setTimeout(function() {
          return _this.drawChart();
        }, 250);
      }), false);
    };

    return Hash5GoogleCharts;

  })(Hash5Charts);

  Hash5Knobs = (function(_super) {

    __extends(Hash5Knobs, _super);

    function Hash5Knobs() {
      return Hash5Knobs.__super__.constructor.apply(this, arguments);
    }

    Hash5Knobs.prototype.createKnob = function() {
      var container, html;
      container = document.getElementById(this.options.container);
      html = "<div class=\"left\">";
      html += "<input type=\"text\" class=\"dial\">";
      html += "</div>";
      html += "<div class=\"right\">";
      html += "</div>";
      $(container).append(html);
      this.insertKnob(container);
      if (this.options.popover != null) {
        $(container).addClass("popover-" + this.options.container);
        return this.createPopover();
      }
    };

    Hash5Knobs.prototype.createPopover = function() {
      var html, placement, trigger;
      placement = "bottom";
      trigger = "hover";
      html = true;
      return $(".popover-" + this.options.container).popover({
        placement: placement,
        delay: {
          show: 700,
          hide: 300
        },
        content: "<span>" + this.options.popover + "</span>",
        trigger: trigger,
        html: html
      });
    };

    Hash5Knobs.prototype.insertKnob = function(container) {
      var dial;
      dial = $(container).children().children('input');
      dial.knob({
        'min': -100,
        'max': 100,
        'bgColor': "#DEDEDE",
        'fgColor': "#DEDEDE",
        'angleOffset': -125,
        'angleArc': 250,
        'readOnly': true,
        'width': 58,
        'height': 58,
        'thickness': 0.5,
        'displayInput': false,
        'color': 'alert',
        draw: function() {
          var color, value, _max, _min;
          value = this.val();
          _min = this.o.min;
          _max = this.o.max;
          if (this.color === "coldtohot") {
            if ((_min <= value && value <= _min * 0.3)) {
              color = pusher.color("#67C2EF");
            } else if ((_min * 0.3 < value && value <= _max * 0.3)) {
              color = pusher.color("#CBE968");
            } else if ((_max * 0.3 < value && value <= _max * 0.7)) {
              color = pusher.color("#FABB3D");
            } else if ((_max * 0.7 < value && value <= _max * 0.9)) {
              color = pusher.color("#FA603D");
            } else {
              color = pusher.color("#FF5454");
            }
          } else {
            if (value <= 0) {
              color = pusher.color("#D0FC3F");
            } else if ((0 < value && value <= _max * 0.6)) {
              color = pusher.color("#FCAC0A");
            } else {
              color = pusher.color("#FC2121");
            }
          }
          return this.o.fgColor = color.html();
        }
      });
      return dial.val(0).trigger("change");
    };

    Hash5Knobs.prototype.updateKnob = function(value) {
      var container, info;
      container = document.getElementById(this.options.container);
      info = $(container).children(".right");
      info.html("<strong>" + value + "%</strong><br /> " + this.options.title);
      return this.animateKnob(parseFloat(value));
    };

    Hash5Knobs.prototype.animateKnob = function(dialValue) {
      var container, dial;
      container = document.getElementById(this.options.container);
      dial = $(container).find('.dial');
      return $({
        value: dial.val()
      }).animate({
        value: dialValue
      }, {
        duration: 2000,
        easing: "easeOutSine",
        step: function() {
          dial.val(Math.floor(this.value)).trigger("change");
        }
      });
    };

    return Hash5Knobs;

  })(Hash5Charts);

  Hash5Sparks = (function(_super) {

    __extends(Hash5Sparks, _super);

    function Hash5Sparks() {
      return Hash5Sparks.__super__.constructor.apply(this, arguments);
    }

    Hash5Sparks.prototype.createSpark = function() {
      var container, html;
      container = document.getElementById(this.options.container);
      html = "<div class=\"left\">";
      html += "<div class=\"minichart\"></div>";
      html += "</div>";
      html += "<div class=\"right\"></div>";
      return $(container).append(html);
    };

    Hash5Sparks.prototype.updateSparkInfo = function(value) {
      var container, info;
      container = document.getElementById(this.options.container);
      info = $(container).children(".right");
      return info.html("<strong>" + value + "</strong><br /> " + this.options.title);
    };

    Hash5Sparks.prototype.updateSparkChart = function(data) {
      var container, spark;
      container = document.getElementById(this.options.container);
      spark = $(container).children(".left").children(".minichart");
      return $(spark).sparkline(data, {
        width: 58,
        height: 62,
        lineColor: "#2FABE9",
        fillColor: "#67C2EF",
        spotColor: "#CBE968",
        maxSpotColor: "#FF5454",
        minSpotColor: "#67C2EF",
        spotRadius: 1.5,
        lineWidth: 1
      });
    };

    return Hash5Sparks;

  })(Hash5Charts);

  selectedState = "Todos";

  today = new Date();

  totalPeriodos = today.getFullYear() - 2005;

  periodos = new Array(totalPeriodos);

  curYear = today.getMonth() < 6 ? today.getFullYear() : today.getFullYear() + 1;

  curMonth = new Date().getMonth();

  curDay = new Date().getDate();

  for (i = _i = 0; 0 <= totalPeriodos ? _i <= totalPeriodos : _i >= totalPeriodos; i = 0 <= totalPeriodos ? ++_i : --_i) {
    periodos[i] = (today.getFullYear() - i - 1) + "-" + (today.getFullYear() - i);
  }

  months = {
    0: 'Jan',
    1: 'Fev',
    2: 'Mar',
    3: 'Abr',
    4: 'Mai',
    5: 'Jun',
    6: 'Jul',
    7: 'Ago',
    8: 'Set',
    9: 'Out',
    10: 'Nov',
    11: 'Dez'
  };

  estados = ["AC", "AM", "AP", "MA", "MT", "PA", "RO", "RR", "TO"];

  tableAlerta = {
    init: function() {
      var estado, _j, _len, _results;
      this.states = {};
      _results = [];
      for (_j = 0, _len = estados.length; _j < _len; _j++) {
        estado = estados[_j];
        _results.push(this.states[estado] = {});
      }
      return _results;
    },
    populate: function(state, date, value) {
      var convertDate, self;
      convertDate = function(dateStr) {
        var dArr;
        dateStr = String(dateStr);
        dArr = dateStr.split("-");
        return new Date(dArr[0], dArr[1] - 1, dArr[2]);
      };
      self = this.states[state];
      self[date] = {};
      self[date].area = value;
      self[date].date = convertDate(date);
      self[date].year = convertDate(date).getFullYear();
      self[date].month = convertDate(date).getMonth();
      return self[date].day = convertDate(date).getDate();
    }
  };

  $.ajax({
    type: "GET",
    url: "../painel/rest/v1/ws_geo_attributequery.php",
    data: {
      table: "alerta_acumulado_diario"
    },
    dataType: "jsonp",
    success: function(data) {
      tableAlerta.init();
      return $.each(data, function(i, properties) {
        return tableAlerta.populate(properties.estado, properties.data, parseFloat(properties.total));
      });
    },
    error: function(error, status, desc) {
      return console.log(status, desc);
    }
  });

  tableProdes = {
    init: function() {
      var estado, period, _j, _len, _results;
      this.states = {};
      _results = [];
      for (_j = 0, _len = estados.length; _j < _len; _j++) {
        estado = estados[_j];
        this.states[estado] = {};
        _results.push((function() {
          var _k, _len1, _results1;
          _results1 = [];
          for (_k = 0, _len1 = periodos.length; _k < _len1; _k++) {
            period = periodos[_k];
            _results1.push(this.states[estado][period] = {});
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    populate: function(period, ac, am, ap, ma, mt, pa, ro, rr, to) {
      var self;
      self = this.states;
      self.AC[period].area = ac;
      self.AM[period].area = am;
      self.AP[period].area = ap;
      self.MA[period].area = ma;
      self.MT[period].area = mt;
      self.PA[period].area = pa;
      self.RO[period].area = ro;
      self.RR[period].area = rr;
      return self.TO[period].area = to;
    }
  };

  $.ajax({
    type: "GET",
    url: "../painel/rest/v1/ws_geo_attributequery.php",
    data: {
      table: "taxa_prodes"
    },
    dataType: "jsonp",
    success: function(data) {
      tableProdes.init();
      return $.each(data, function(i, properties) {
        return tableProdes.populate(properties.ano_prodes.replace('/', '-'), parseFloat(properties.ac), parseFloat(properties.am), parseFloat(properties.ap), parseFloat(properties.ma), parseFloat(properties.mt), parseFloat(properties.pa), parseFloat(properties.ro), parseFloat(properties.rr), parseFloat(properties.to));
      });
    },
    error: function(error, status, desc) {
      return console.log(status, desc);
    }
  });

  tableNuvens = {
    init: function() {
      return this.nuvem = {};
    },
    populate: function(date, value) {
      var convertDate, self;
      convertDate = function(dateStr) {
        var dArr;
        dateStr = String(dateStr);
        dArr = dateStr.split("-");
        return new Date(dArr[0], dArr[1] - 1, dArr[2]);
      };
      self = this.nuvem;
      self[date] = {};
      self[date].value = value;
      self[date].date = convertDate(date);
      self[date].year = convertDate(date).getFullYear();
      self[date].month = convertDate(date).getMonth();
      return self[date].day = convertDate(date).getDate();
    }
  };

  $.ajax({
    type: "GET",
    url: "../painel/rest/v1/ws_geo_attributequery.php",
    data: {
      table: "nuvem_deter"
    },
    dataType: "jsonp",
    success: function(data) {
      tableNuvens.init();
      return $.each(data, function(i, properties) {
        return tableNuvens.populate(properties.data, properties.percent);
      });
    },
    error: function(error, status, desc) {
      return console.log(status, desc);
    }
  });

  chart1 = new Hash5GoogleCharts({
    type: "Line",
    container: "chart1",
    title: "Alerta DETER: Índice Diário",
    buttons: {
      minimize: true,
      maximize: true
    },
    selects: {
      months: {
        0: 'Jan',
        1: 'Fev',
        2: 'Mar',
        3: 'Abr',
        4: 'Mai',
        5: 'Jun',
        6: 'Jul',
        7: 'Ago',
        8: 'Set',
        9: 'Out',
        10: 'Nov',
        11: 'Dez'
      },
      years: {
        2004: '2004',
        2005: '2005',
        2006: '2006',
        2007: '2007',
        2008: '2008',
        2009: '2009',
        2010: '2010',
        2011: '2011',
        2012: '2012',
        2013: '2013'
      }
    }
  });

  chart1.createContainer();

  chart1.yearsSlct.options[totalPeriodos + 1].selected = true;

  chart1.monthsSlct.options[curMonth].selected = true;

  $("#slct-years").on("change", function(event) {
    chart8.drawChart();
    knob1.drawChart();
    knob2.drawChart();
    knob3.drawChart();
    spark1.drawChart();
    return spark2.drawChart();
  });

  $("#slct-months").on("change", function(event) {
    chart3.drawChart();
    chart8.drawChart();
    knob1.drawChart();
    knob2.drawChart();
    knob3.drawChart();
    spark1.drawChart();
    return spark2.drawChart();
  });

  chart1.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, options, secondPeriod, _j,
      _this = this;
    createTable = function(state) {
      var day, sum, _j, _results;
      sum = 0;
      _results = [];
      for (day = _j = 1; 1 <= daysInMonth ? _j <= daysInMonth : _j >= daysInMonth; day = 1 <= daysInMonth ? ++_j : --_j) {
        $.each(tableAlerta.states[state], function(key, reg) {
          var _ref;
          if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod) && reg.day === day) {
            sum += reg.area;
            return false;
          }
        });
        _results.push(_this.data.setValue(day - 1, 1, Math.round((_this.data.getValue(day - 1, 1) + sum) * 100) / 100));
      }
      return _results;
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("number", "Dia");
    this.data.addColumn("number", "Área");
    daysInMonth = new Date(this.yearsSlct.value, this.monthsSlct.value + 1, 0).getDate();
    firstPeriod = new Date(this.yearsSlct.value, this.monthsSlct.value, 1);
    secondPeriod = new Date(this.yearsSlct.value, this.monthsSlct.value, daysInMonth);
    data = [];
    for (day = _j = 1; 1 <= daysInMonth ? _j <= daysInMonth : _j >= daysInMonth; day = 1 <= daysInMonth ? ++_j : --_j) {
      data[0] = day;
      data[1] = 0;
      this.data.addRow(data);
    }
    if (selectedState === "Todos") {
      $.each(tableAlerta.states, function(state, value) {
        return createTable(state);
      });
    } else {
      createTable(selectedState);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      legend: "none",
      chartArea: {
        width: "70%",
        height: "70%"
      },
      colors: ['#3ABCFC'],
      vAxis: {
        title: "Área Km2"
      },
      hAxis: {
        title: "Dias",
        gridlines: {
          color: "#CCC",
          count: daysInMonth / 5
        }
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  chart2 = new Hash5GoogleCharts({
    type: "Area",
    container: "chart2",
    period: 2,
    title: "Alerta DETER: Índice Mensal",
    buttons: {
      minusplus: true,
      minimize: true,
      maximize: true
    }
  });

  chart2.createContainer();

  chart2.addBtn.onclick = function() {
    chart2.options.period++;
    return chart2.drawChart();
  };

  chart2.delBtn.onclick = function() {
    chart2.options.period--;
    return chart2.drawChart();
  };

  chart2.drawChart = function() {
    var data, month, options, sumValues, _j, _k, _ref, _ref1, _ref2,
      _this = this;
    sumValues = function(year, month) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (selectedState === "Todos") {
        $.each(tableAlerta.states, function(key, state) {
          return $.each(state, function(key, reg) {
            var _ref;
            if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod) && reg.month === month) {
              return sum += reg.area;
            }
          });
        });
      } else {
        $.each(tableAlerta.states[selectedState], function(key, reg) {
          var _ref;
          if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod) && reg.month === month) {
            return sum += reg.area;
          }
        });
      }
      return Math.round(sum * 100) / 100;
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "mes");
    for (i = _j = 0, _ref = this.options.period; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.data.addColumn("number", periodos[i]);
    }
    for (month in months) {
      data = [months[month]];
      month = parseInt(month);
      if ((7 <= (_ref1 = month + 7) && _ref1 <= 11)) {
        month += 7;
      } else {
        month -= 5;
      }
      for (i = _k = 1, _ref2 = this.options.period; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 1 <= _ref2 ? ++_k : --_k) {
        data[i] = sumValues(curYear - i + 1, month);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Área Km2"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    this.addBtn.disabled = true;
    this.delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.addBtn.disabled = _this.options.period > totalPeriodos;
      return _this.delBtn.disabled = _this.options.period < 2;
    });
    return this.chart.draw(this.data, options);
  };

  chart3 = new Hash5GoogleCharts({
    type: "Bar",
    container: "chart3",
    period: 1,
    title: "Alerta DETER: Índice Períodos",
    buttons: {
      minusplus: true,
      minimize: true,
      maximize: true
    }
  });

  chart3.createContainer();

  chart3.addBtn.onclick = function() {
    chart3.options.period++;
    return chart3.drawChart();
  };

  chart3.delBtn.onclick = function() {
    chart3.options.period--;
    return chart3.drawChart();
  };

  chart3.drawChart = function() {
    var data, options, sumAvg, sumAvgValues, sumTotal, sumTotalValues, sumValues, _j, _ref,
      _this = this;
    sumValues = function(firstPeriod, secondPeriod) {
      var sum;
      sum = 0;
      if (selectedState === "Todos") {
        $.each(tableAlerta.states, function(key, state) {
          return $.each(state, function(key, reg) {
            var _ref;
            if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
              return sum += reg.area;
            }
          });
        });
      } else {
        $.each(tableAlerta.states[selectedState], function(key, reg) {
          var _ref;
          if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
            return sum += reg.area;
          }
        });
      }
      return Math.round(sum * 100) / 100;
    };
    sumTotalValues = function(year) {
      var firstPeriod, secondPeriod;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      return sumValues(firstPeriod, secondPeriod);
    };
    sumAvgValues = function(year) {
      var firstPeriod, month, secondPeriod;
      month = parseInt(chart1.monthsSlct.value);
      firstPeriod = new Date(year - 1, 7, 1);
      if (month > 6) {
        secondPeriod = new Date(year - 1, month + 1, 0);
      } else if (month !== curMonth) {
        secondPeriod = new Date(year, month + 1, 0);
      } else {
        secondPeriod = new Date(year, month, curDay);
      }
      return sumValues(firstPeriod, secondPeriod);
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Parcial");
    this.data.addColumn("number", "Diferença");
    for (i = _j = 0, _ref = this.options.period; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      data = [periodos[i]];
      sumTotal = sumTotalValues(curYear - i);
      sumAvg = sumAvgValues(curYear - i);
      data[1] = sumAvg;
      data[2] = Math.round((sumTotal - sumAvg) * 100) / 100;
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "68%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121'],
      vAxis: {
        title: "Periodos"
      },
      hAxis: {
        title: "Área Km2"
      },
      bar: {
        groupWidth: "80%"
      },
      isStacked: true,
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    this.addBtn.disabled = true;
    this.delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.addBtn.disabled = _this.options.period > totalPeriodos - 1;
      return _this.delBtn.disabled = _this.options.period < 2;
    });
    return this.chart.draw(this.data, options);
  };

  chart4 = new Hash5GoogleCharts({
    type: "Column",
    container: "chart4",
    period: 2,
    title: "Alerta DETER: UFs",
    buttons: {
      minusplus: true,
      minimize: true,
      maximize: true
    }
  });

  chart4.createContainer();

  chart4.addBtn.onclick = function() {
    chart4.options.period++;
    return chart4.drawChart();
  };

  chart4.delBtn.onclick = function() {
    chart4.options.period--;
    return chart4.drawChart();
  };

  chart4.drawChart = function() {
    var data, j, options, sumValues, _j, _k, _ref, _ref1,
      _this = this;
    sumValues = function(state, year) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      $.each(tableAlerta.states[state], function(key, reg) {
        var _ref;
        if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
          return sum += reg.area;
        }
      });
      return Math.round(sum * 100) / 100;
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "mes");
    for (i = _j = 0, _ref = this.options.period; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.data.addColumn("number", periodos[i]);
    }
    if (selectedState === "Todos") {
      $.each(tableAlerta.states, function(state, reg) {
        var data, j, _k, _ref1;
        data = [state];
        for (j = _k = 1, _ref1 = _this.options.period; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; j = 1 <= _ref1 ? ++_k : --_k) {
          data[j] = sumValues(state, curYear - j + 1);
        }
        return _this.data.addRow(data);
      });
    } else {
      data = [selectedState];
      for (j = _k = 1, _ref1 = this.options.period; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; j = 1 <= _ref1 ? ++_k : --_k) {
        data[j] = sumValues(selectedState, curYear - j + 1);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área Km2"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    this.addBtn.disabled = true;
    this.delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.addBtn.disabled = _this.options.period > totalPeriodos;
      return _this.delBtn.disabled = _this.options.period < 2;
    });
    return this.chart.draw(this.data, options);
  };

  chart5 = new Hash5GoogleCharts({
    type: "Area",
    container: "chart5",
    title: "Taxa PRODES|Alerta DETER: Acumulado Períodos",
    buttons: {
      minimize: true,
      maximize: true
    }
  });

  chart5.createContainer();

  chart5.drawChart = function() {
    var data, options, sumDeter, sumProdes;
    sumDeter = function(year) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (selectedState === "Todos") {
        $.each(tableAlerta.states, function(key, state) {
          return $.each(state, function(key, reg) {
            var _ref;
            if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
              return sum += reg.area;
            }
          });
        });
      } else {
        $.each(tableAlerta.states[selectedState], function(key, reg) {
          var _ref;
          if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
            return sum += reg.area;
          }
        });
      }
      if (sum >= 0) {
        return Math.round(sum * 100) / 100;
      }
    };
    sumProdes = function(period) {
      var sum;
      sum = 0;
      if (selectedState === "Todos") {
        $.each(tableProdes.states, function(key, state) {
          return sum += state[period].area;
        });
      } else {
        sum = tableProdes.states[selectedState][period].area;
      }
      if (sum >= 0) {
        return sum;
      }
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Alerta DETER");
    this.data.addColumn("number", "Taxa PRODES");
    i = totalPeriodos;
    while (i >= 0) {
      data = [periodos[i]];
      data[1] = sumDeter(curYear - i);
      data[2] = sumProdes(periodos[i]);
      this.data.addRow(data);
      i--;
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#D0FC3F'],
      vAxis: {
        title: "Área Km2"
      },
      hAxis: {
        title: "Periodos"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  chart6 = new Hash5GoogleCharts({
    type: "Column",
    container: "chart6",
    period: 1,
    title: "Taxa PRODES|Alerta DETER: UFs",
    buttons: {
      minimize: true,
      maximize: true,
      arrows: true
    }
  });

  chart6.createContainer();

  chart6.changeTitle(periodos[chart6.options.period]);

  chart6.leftBtn.onclick = function() {
    chart6.options.period++;
    return chart6.drawChart();
  };

  chart6.rightBtn.onclick = function() {
    chart6.options.period--;
    return chart6.drawChart();
  };

  chart6.drawChart = function() {
    var data, options, sumDeter, sumProdes,
      _this = this;
    sumDeter = function(state, year) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      $.each(tableAlerta.states[state], function(key, reg) {
        var _ref;
        if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
          return sum += reg.area;
        }
      });
      return Math.round(sum * 100) / 100;
    };
    sumProdes = function(state, year) {
      var period, sum;
      sum = 0;
      period = (year - 1) + "-" + year;
      $.each(tableProdes.states[state], function(key, reg) {
        if (key === period) {
          if (reg.area != null) {
            return sum += reg.area;
          }
        }
      });
      return Math.round(sum * 100) / 100;
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Estado");
    this.data.addColumn("number", "Alerta DETER");
    this.data.addColumn("number", "Taxa PRODES");
    if (selectedState === "Todos") {
      $.each(tableAlerta.states, function(state, reg) {
        var data;
        data = [state];
        data[1] = sumDeter(state, curYear - _this.options.period);
        data[2] = sumProdes(state, curYear - _this.options.period);
        return _this.data.addRow(data);
      });
    } else {
      data = [selectedState];
      data[1] = sumDeter(selectedState, curYear - this.options.period);
      data[2] = sumProdes(selectedState, curYear - this.options.period);
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#D0FC3F'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área Km2"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    this.changeTitle("Taxa PRODES|Alerta DETER: UFs [" + periodos[this.options.period] + "]");
    this.rightBtn.disabled = true;
    this.leftBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.rightBtn.disabled = _this.options.period < 2;
      return _this.leftBtn.disabled = _this.options.period >= totalPeriodos;
    });
    return this.chart.draw(this.data, options);
  };

  chart7 = new Hash5GoogleCharts({
    type: "Pie",
    container: "chart7",
    period: 0,
    buttons: {
      arrows: true,
      minimize: true,
      maximize: true
    }
  });

  chart7.createContainer();

  chart7.changeTitle(periodos[chart7.options.period]);

  chart7.leftBtn.onclick = function() {
    chart7.options.period++;
    return chart7.drawChart();
  };

  chart7.rightBtn.onclick = function() {
    chart7.options.period--;
    return chart7.drawChart();
  };

  chart7.drawChart = function() {
    var data, estado, options, sumValues, _j, _ref,
      _this = this;
    sumValues = function(state, year) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      $.each(tableAlerta.states[state], function(key, reg) {
        var _ref;
        if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
          return sum += reg.area;
        }
      });
      return Math.round(sum * 100) / 100;
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "mes");
    this.data.addColumn("number", periodos[totalPeriodos]);
    for (i = _j = 0, _ref = estados.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      estado = estados[i];
      data = [estado];
      data[1] = sumValues(estados[i], curYear - this.options.period);
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      chartArea: {
        width: "90%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      backgroundColor: "transparent"
    };
    this.changeTitle(periodos[this.options.period]);
    this.rightBtn.disabled = true;
    this.leftBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.rightBtn.disabled = _this.options.period < 1;
      return _this.leftBtn.disabled = _this.options.period >= totalPeriodos;
    });
    return this.chart.draw(this.data, options);
  };

  chart8 = new Hash5GoogleCharts({
    type: "Pie",
    container: "chart8",
    period: 1,
    buttons: {
      minimize: true,
      maximize: true
    }
  });

  chart8.createContainer();

  chart8.drawChart = function() {
    var data, daysInMonth, estado, firstPeriod, options, pieText, pieTooltip, secondPeriod, sumValues, _j, _ref;
    sumValues = function(state) {
      var sum;
      sum = 0;
      $.each(tableAlerta.states[state], function(key, reg) {
        var _ref;
        if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
          return sum += reg.area;
        }
      });
      if (firstPeriod > today) {
        return 1;
      } else {
        return Math.round(sum * 100) / 100;
      }
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Estado");
    this.data.addColumn("number", "Área Total");
    daysInMonth = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value + 1, 0).getDate();
    firstPeriod = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value, 1);
    secondPeriod = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value, daysInMonth);
    if (firstPeriod > today) {
      pieText = "none";
      pieTooltip = "none";
    } else {
      pieText = "percent";
      pieTooltip = "focus";
    }
    for (i = _j = 0, _ref = estados.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      estado = estados[i];
      data = [estado];
      data[1] = sumValues(estados[i]);
      this.data.addRow(data);
    }
    this.changeTitle(months[chart1.monthsSlct.value] + ", " + chart1.yearsSlct.value);
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      pieSliceText: pieText,
      tooltip: {
        trigger: pieTooltip
      },
      chartArea: {
        width: "90%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área Km2"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  chart9 = new Hash5GoogleCharts({
    type: "Line",
    container: "chart9",
    period: 2,
    title: "Alerta DETER: Taxa(%) de Nuvens",
    buttons: {
      minusplus: true,
      minimize: true,
      maximize: true
    }
  });

  chart9.createContainer();

  chart9.addBtn.onclick = function() {
    chart9.options.period++;
    return chart9.drawChart();
  };

  chart9.delBtn.onclick = function() {
    chart9.options.period--;
    return chart9.drawChart();
  };

  chart9.drawChart = function() {
    var data, month, options, sumValues, _j, _k, _ref, _ref1, _ref2,
      _this = this;
    sumValues = function(year, month) {
      var firstPeriod, percent, secondPeriod;
      percent = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      $.each(tableNuvens.nuvem, function(key, nuvem) {
        if (nuvem.date >= firstPeriod && nuvem.date <= secondPeriod && nuvem.month === month) {
          percent = nuvem.value;
          return false;
        }
      });
      return Math.round(percent * 100);
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "mes");
    for (i = _j = 0, _ref = this.options.period; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.data.addColumn("number", periodos[i]);
    }
    for (month in months) {
      data = [months[month]];
      month = parseInt(month);
      if ((7 <= (_ref1 = month + 7) && _ref1 <= 11)) {
        month += 7;
      } else {
        month -= 5;
      }
      for (i = _k = 1, _ref2 = this.options.period; 1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 1 <= _ref2 ? ++_k : --_k) {
        data[i] = sumValues(curYear - i + 1, month);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Porcentagem"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    this.addBtn.disabled = true;
    this.delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", function() {
      _this.addBtn.disabled = _this.options.period > totalPeriodos - 4;
      return _this.delBtn.disabled = _this.options.period < 2;
    });
    return this.chart.draw(this.data, options);
  };

  spark1 = new Hash5Sparks({
    container: "spark1",
    title: "Total Mensal"
  });

  spark1.createSpark();

  spark1.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, secondPeriod, value, _j,
      _this = this;
    createTable = function(state) {
      var day, dayValue, _j, _results;
      dayValue = 0;
      _results = [];
      for (day = _j = 1; 1 <= daysInMonth ? _j <= daysInMonth : _j >= daysInMonth; day = 1 <= daysInMonth ? ++_j : --_j) {
        $.each(tableAlerta.states[state], function(key, reg) {
          var _ref;
          if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod) && reg.day === day) {
            dayValue += reg.area;
            return false;
          }
        });
        _results.push(data[day - 1] = Math.round((data[day - 1] + dayValue) * 100) / 100);
      }
      return _results;
    };
    daysInMonth = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value + 1, 0).getDate();
    firstPeriod = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value, 1);
    secondPeriod = new Date(chart1.yearsSlct.value, chart1.monthsSlct.value, daysInMonth);
    data = [];
    for (day = _j = 1; 1 <= daysInMonth ? _j <= daysInMonth : _j >= daysInMonth; day = 1 <= daysInMonth ? ++_j : --_j) {
      data[day - 1] = 0;
    }
    if (selectedState === "Todos") {
      $.each(tableAlerta.states, function(state, value) {
        return createTable(state);
      });
    } else {
      createTable(selectedState);
    }
    value = data[daysInMonth - 1];
    this.updateSparkInfo(value);
    return this.updateSparkChart(data);
  };

  spark2 = new Hash5Sparks({
    container: "spark2",
    title: "Total Período"
  });

  spark2.createSpark();

  spark2.drawChart = function() {
    var data, sumValues, value,
      _this = this;
    sumValues = function(year, month) {
      var firstPeriod, secondPeriod, sum;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (selectedState === "Todos") {
        $.each(tableAlerta.states, function(key, state) {
          return $.each(state, function(key, reg) {
            if (reg.date >= firstPeriod && reg.date <= secondPeriod && reg.month === month) {
              return sum += reg.area;
            }
          });
        });
      } else {
        $.each(tableAlerta.states[selectedState], function(key, reg) {
          if (reg.date >= firstPeriod && reg.date <= secondPeriod && reg.month === month) {
            return sum += reg.area;
          }
        });
      }
      return Math.round(sum * 100) / 100;
    };
    data = [];
    $.each(months, function(number, month) {
      var _ref;
      i = number;
      number = parseInt(number);
      if ((7 <= (_ref = number + 7) && _ref <= 11)) {
        number += 7;
      } else {
        number -= 5;
      }
      return data[i] = sumValues(chart1.yearsSlct.value, number);
    });
    value = 0;
    $.each(data, function() {
      return value += this;
    });
    this.updateSparkInfo(Math.round(value * 100) / 100);
    return this.updateSparkChart(data);
  };

  gauge1 = new Hash5GoogleCharts({
    type: "Gauge",
    container: "gauge1",
    title: "Demo"
  });

  gauge1.createMinimalContainer();

  gauge1.drawChart = function() {
    var data, options, periodDeforestationRate, title;
    periodDeforestationRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref, _ref1;
        sum = 0;
        if (selectedState === "Todos") {
          for (state in tableAlerta.states) {
            for (reg in tableAlerta.states[state]) {
              reg = tableAlerta.states[state][reg];
              if ((date.getFullYear() <= (_ref = reg.year) && _ref <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in tableAlerta.states[selectedState]) {
            reg = tableAlerta.states[selectedState][reg];
            if ((date.getFullYear() <= (_ref1 = reg.year) && _ref1 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      year = (month > 5 ? year++ : year);
      curDate = new Date(year, month);
      preDate = new Date(year - 1, month);
      curValue = 0;
      curValue = sumValues(curDate);
      preValue = 0;
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Label");
    this.data.addColumn("number", "Valor");
    title = 'TVAA';
    data = [title];
    data[1] = periodDeforestationRate(chart1.yearsSlct.value, chart1.monthsSlct.value);
    this.data.addRow(data);
    options = {
      min: -100,
      max: 100,
      greenFrom: -100,
      greenTo: 0,
      redFrom: 50,
      redTo: 100,
      yellowFrom: 0,
      yellowTo: 50,
      minorTicks: 5,
      greenColor: '#4D9652',
      yellowColor: '#FCC065',
      redColor: '#DB5D3D',
      animation: {
        duration: 700,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  gauge2 = new Hash5GoogleCharts({
    type: "Gauge",
    container: "gauge2",
    title: "Demo"
  });

  gauge2.createMinimalContainer();

  gauge2.drawChart = function() {
    var data, options, periodDeforestationRate, title;
    periodDeforestationRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref, _ref1;
        sum = 0;
        if (selectedState === "Todos") {
          for (state in tableAlerta.states) {
            for (reg in tableAlerta.states[state]) {
              reg = tableAlerta.states[state][reg];
              if ((date.getFullYear() <= (_ref = reg.year) && _ref <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in tableAlerta.states[selectedState]) {
            reg = tableAlerta.states[selectedState][reg];
            if ((date.getFullYear() <= (_ref1 = reg.year) && _ref1 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      year = (month > 5 ? year++ : year);
      curDate = new Date(year, month);
      preDate = new Date(year, month - 1);
      curValue = 0;
      curValue = sumValues(curDate);
      preValue = 0;
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Label");
    this.data.addColumn("number", "Valor");
    title = 'TVMA';
    data = [title];
    data[1] = periodDeforestationRate(chart1.yearsSlct.value, chart1.monthsSlct.value);
    this.data.addRow(data);
    options = {
      min: -100,
      max: 100,
      greenFrom: -100,
      greenTo: 0,
      redFrom: 50,
      redTo: 100,
      yellowFrom: 0,
      yellowTo: 50,
      minorTicks: 5,
      greenColor: '#4D9652',
      yellowColor: '#FCC065',
      redColor: '#DB5D3D',
      animation: {
        duration: 700,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  gauge3 = new Hash5GoogleCharts({
    type: "Gauge",
    container: "gauge3",
    title: "Demo"
  });

  gauge3.createMinimalContainer();

  gauge3.drawChart = function() {
    var data, options, periodDeforestationAvgRate, title;
    periodDeforestationAvgRate = function(year, month) {
      var curPeriod, curValue, prePeriod, preValue, sumValues;
      sumValues = function(fp, sp) {
        var reg, state, sum, _ref, _ref1;
        sum = 0;
        if (selectedState === "Todos") {
          for (state in tableAlerta.states) {
            for (reg in tableAlerta.states[state]) {
              reg = tableAlerta.states[state][reg];
              if ((fp <= (_ref = reg.date) && _ref <= sp)) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in tableAlerta.states[selectedState]) {
            reg = tableAlerta.states[selectedState][reg];
            if ((fp <= (_ref1 = reg.date) && _ref1 <= sp)) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curValue = 0;
      preValue = 0;
      year = (month > 5 ? year++ : year);
      prePeriod = new Date(year - 1, 7, 1);
      curPeriod = new Date(year, month + 1, 0);
      curValue = sumValues(prePeriod, curPeriod);
      prePeriod = new Date(year - 2, 7, 1);
      curPeriod = new Date(year - 1, month + 1, 0);
      preValue = sumValues(prePeriod, curPeriod);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    if (this.options.started) {
      this.createChart();
    }
    this.dataTable();
    this.data.addColumn("string", "Label");
    this.data.addColumn("number", "Valor");
    title = 'TVPA';
    data = [title];
    data[1] = periodDeforestationAvgRate(chart1.yearsSlct.value, chart1.monthsSlct.value);
    this.data.addRow(data);
    options = {
      min: -100,
      max: 100,
      greenFrom: -100,
      greenTo: 0,
      redFrom: 50,
      redTo: 100,
      yellowFrom: 0,
      yellowTo: 50,
      minorTicks: 5,
      greenColor: '#4D9652',
      yellowColor: '#FCC065',
      redColor: '#DB5D3D',
      animation: {
        duration: 700,
        easing: "inAndOut"
      }
    };
    return this.chart.draw(this.data, options);
  };

  knob1 = new Hash5Knobs({
    container: "knob1",
    title: "Taxa VAA",
    popover: "Taxa de variação em relação ao mesmo mês do ano anterior"
  });

  knob1.createKnob();

  knob1.drawChart = function() {
    var periodDeforestationRate, value;
    periodDeforestationRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref, _ref1;
        sum = 0;
        if (selectedState === "Todos") {
          for (state in tableAlerta.states) {
            for (reg in tableAlerta.states[state]) {
              reg = tableAlerta.states[state][reg];
              if ((date.getFullYear() <= (_ref = reg.year) && _ref <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in tableAlerta.states[selectedState]) {
            reg = tableAlerta.states[selectedState][reg];
            if ((date.getFullYear() <= (_ref1 = reg.year) && _ref1 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year - 1, month);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforestationRate(parseInt(chart1.yearsSlct.value), parseInt(chart1.monthsSlct.value));
    this.updateKnob(value);
  };

  knob2 = new Hash5Knobs({
    container: "knob2",
    title: "Taxa VMA",
    popover: "Taxa de variação em relação ao mês anterior"
  });

  knob2.createKnob();

  knob2.drawChart = function() {
    var periodDeforestationRate, value;
    periodDeforestationRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref, _ref1;
        sum = 0;
        if (selectedState === "Todos") {
          for (state in tableAlerta.states) {
            for (reg in tableAlerta.states[state]) {
              reg = tableAlerta.states[state][reg];
              if ((date.getFullYear() <= (_ref = reg.year) && _ref <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in tableAlerta.states[selectedState]) {
            reg = tableAlerta.states[selectedState][reg];
            if ((date.getFullYear() <= (_ref1 = reg.year) && _ref1 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year, month - 1);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforestationRate(parseInt(chart1.yearsSlct.value), parseInt(chart1.monthsSlct.value));
    this.updateKnob(value);
  };

  knob3 = new Hash5Knobs({
    container: "knob3",
    title: "Taxa VPA",
    popover: "Taxa de variação em relação ao período PRODES anterior"
  });

  knob3.createKnob();

  knob3.drawChart = function() {
    var periodDeforestationAvgRate, value;
    periodDeforestationAvgRate = function(year, month) {
      var curValue, preValue, sumPeriods, sumValues;
      sumValues = function(firstPeriod, secondPeriod) {
        var sum;
        sum = 0;
        if (selectedState === "Todos") {
          $.each(tableAlerta.states, function(key, state) {
            return $.each(state, function(key, reg) {
              var _ref;
              if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
                return sum += reg.area;
              }
            });
          });
        } else {
          $.each(tableAlerta.states[selectedState], function(key, reg) {
            var _ref;
            if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod)) {
              return sum += reg.area;
            }
          });
        }
        return Math.round(sum * 100) / 100;
      };
      if (month > 6) {
        year++;
      } else {
        year;
      }
      sumPeriods = function(year, month) {
        var firstPeriod, secondPeriod;
        firstPeriod = new Date(year - 1, 7, 1);
        secondPeriod = new Date(year, month + 1, 0);
        return sumValues(firstPeriod, secondPeriod);
      };
      curValue = sumPeriods(year, month);
      preValue = sumPeriods(year - 1, month);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforestationAvgRate(parseInt(chart1.yearsSlct.value), parseInt(chart1.monthsSlct.value));
    this.updateKnob(value);
  };

  window.reloadCharts = function() {
    chart1.drawChart();
    chart2.drawChart();
    chart3.drawChart();
    chart4.drawChart();
    chart5.drawChart();
    chart6.drawChart();
    chart7.drawChart();
    chart8.drawChart();
    chart9.drawChart();
    knob1.drawChart();
    knob2.drawChart();
    knob3.drawChart();
    spark1.drawChart();
    return spark2.drawChart();
  };

  $(".quick-btn a").on("click", function(event) {
    event.preventDefault();
    selectedState = $(this).prop("id");
    $(this).each(function() {
      return $("a").removeClass("active");
    });
    $(this).addClass("active");
    return reloadCharts();
  });

}).call(this);
