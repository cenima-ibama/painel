// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.H5 = {
    version: 0.7,
    company: "Hexgis <www.hexgis.com>",
    author: "Helmuth Saatkamp <helmuthdu@gmail.com>",
    isMobile: {
      Android: function() {
        return navigator.userAgent.match(/Android/i);
      },
      BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i);
      },
      iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
      },
      Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i);
      },
      Windows: function() {
        return navigator.userAgent.match(/IEMobile/i);
      },
      any: function() {
        return this.Android() || this.BlackBerry() || this.iOS() || this.Opera() || this.Windows();
      }
    },
    Data: {},
    DB: {
      addDB: function(opt) {
        this[opt.name] = {};
        this[opt.name].table = opt.table;
        return this[opt.name].data = null;
      }
    }
  };

  H5.Rest = (function() {
    Rest.prototype.options = {
      url: null,
      restService: "ws_geo_attributequery.php",
      table: null,
      fields: null,
      parameters: null,
      order: null,
      limit: null
    };

    Rest.prototype.data = null;

    function Rest(options) {
      if (options.url.substr(options.url.length - 1, 1) !== "/") {
        options.url += "/";
      }
      this.options = $.extend({}, this.options, options);
      this._request();
    }

    Rest.prototype._request = function() {
      var query, url;
      url = this.options.url + "v1/" + this.options.restService;
      if (this.options.table) {
        query = "&table=" + this.options.table;
      }
      if (this.options.parameters) {
        query += "&parameters=" + this.options.parameters;
      }
      if (this.options.fields) {
        query += "&fields=" + this.options.fields;
      }
      if (this.options.order) {
        query += "&order=" + this.options.order;
      }
      if (this.options.limit) {
        query += "&limit=" + this.options.limit;
      }
      url = url + "?" + query;
      return this.data = JSON.parse(this._getfile(url));
    };

    Rest.prototype._getfile = function(url) {
      var AJAX;
      if (window.XMLHttpRequest) {
        AJAX = new XMLHttpRequest();
      } else {
        AJAX = new ActiveXObject("Microsoft.XMLHTTP");
      }
      if (AJAX) {
        AJAX.open("GET", url, false);
        AJAX.send(null);
        return AJAX.responseText;
      } else {
        return false;
      }
    };

    return Rest;

  })();

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  google.load("visualization", "1", {
    packages: ["table"]
  });

  H5.Charts = {};

  H5.Charts.Container = (function() {
    Container.prototype.options = {
      type: null,
      container: null,
      period: 1,
      title: "",
      defaultClass: "",
      selects: void 0,
      resizing: 0,
      loadingImage: null,
      numberOfBox: 1,
      buttons: {
        minusplus: false,
        arrows: false,
        table: false,
        "export": false,
        minimize: false,
        maximize: false,
        close: false
      }
    };

    function Container(options) {
      this.options = $.extend({}, this.options, options);
      this._createContainer();
    }

    Container.prototype.changeTitle = function(title) {
      var pipeline;
      $(this._boxTitle).html(title);
      if (this.options.buttons.arrows || this.options.buttons.minusplus || (this.options.selects != null)) {
        pipeline = "<span class=\"break\"></span>";
        return $(this._boxTitle).prepend(pipeline);
      }
    };

    Container.prototype._createContainer = function() {
      var addBtn, addIcon, boxContent, boxHeader, boxLoad, boxTable, boxTitle, closeBtn, closeIcon, data, delBtn, delIcon, exportBtn, exportIcon, formBtn, i, key, leftBtn, leftCtrl, leftIcon, maxBtn, maxIcon, minBtn, minIcon, name, options, pipeline, rightBtn, rightCtrl, rightIcon, select, tableBtn, tableIcon, value, width, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4;
      this._container = document.getElementById(this.options.container);
      boxHeader = document.createElement("div");
      boxHeader.className = "box-header";
      this._boxHeader = boxHeader;
      boxTitle = document.createElement("h2");
      boxTitle.innerHTML = this.options.title;
      this._boxTitle = boxTitle;
      leftCtrl = document.createElement("div");
      leftCtrl.className = "btn-group chart-icon btn-left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "btn-group chart-icon btn-right";
      this._rightCtrl = rightCtrl;
      this._boxContent = [];
      width = 99.7 / this.options.numberOfBox;
      for (i = _i = 0, _ref = this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        boxContent = document.createElement("div");
        boxContent.id = "box-" + this.options.container + "-" + i;
        boxContent.className = "box-content";
        if (this.options.numberOfBox > 1) {
          $(boxContent).attr('style', 'width:' + width + '%;border-' + (i === 0 ? 'right: 0; float: left' : i === parseInt(this.options.numberOfBox - 1) ? 'left: 0; float: left;' : 'right: 0; border-left:0; float:left;'));
        }
        this._boxContent[i] = boxContent;
      }
      if (this.options.loadingImage) {
        boxLoad = document.createElement("div");
        boxLoad.id = "box-" + this.options.container;
        boxLoad.className = "box-content";
        boxLoad.style.display = "none";
        boxLoad.innerHTML = this.options.loadingImage ? this.options.loadingImage : "Loading...";
        this._boxLoad = boxLoad;
      }
      $(this._boxHeader).append(this._leftCtrl, this._boxTitle, this._rightCtrl);
      this._box = document.createElement("div");
      for (i = _j = 0, _ref1 = this.options.numberOfBox - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        this._box.appendChild(this._boxContent[i]);
      }
      if (this.options.loadingImage) {
        $(this._container).append(this._boxHeader, this._box, this._boxLoad);
      } else {
        $(this._container).append(this._boxHeader, this._box);
      }
      pipeline = "<span class=\"break\"></span>";
      if (this.options.buttons.minusplus) {
        $(this._boxTitle).prepend(pipeline);
        delBtn = document.createElement("button");
        delBtn.id = this.options.container + "-btn-minus";
        delBtn.setAttribute('title', 'Remover último Período');
        delBtn.className = "btn";
        this._delBtn = delBtn;
        delIcon = document.createElement("i");
        delIcon.className = "icon-minus";
        this._delIcon = delIcon;
        $(this._delBtn).append(this._delIcon);
        addBtn = document.createElement("button");
        addBtn.id = this.options.container + "-btn-plus";
        addBtn.setAttribute('title', 'Adicionar novo Período');
        addBtn.className = "btn";
        this._addBtn = addBtn;
        addIcon = document.createElement("i");
        addIcon.className = "icon-plus";
        this._addIcon = addIcon;
        $(this._addBtn).append(this._addIcon);
        $(this._leftCtrl).append(this._delBtn, this._addBtn);
      } else if (this.options.buttons.arrows) {
        $(this._boxTitle).prepend(pipeline);
        leftBtn = document.createElement("button");
        leftBtn.id = this.options.container + "-btn-left";
        leftBtn.className = "btn";
        this._leftBtn = leftBtn;
        leftIcon = document.createElement("i");
        leftIcon.className = "icon-arrow-left";
        this._leftIcon = leftIcon;
        $(this._leftBtn).append(this._leftIcon);
        rightBtn = document.createElement("button");
        rightBtn.id = this.options.container + "-btn-right";
        rightBtn.className = "btn";
        this._rightBtn = rightBtn;
        rightIcon = document.createElement("i");
        rightIcon.className = "icon-arrow-right";
        this._rightIcon = rightIcon;
        $(this._rightBtn).append(this._rightIcon);
        $(this._leftCtrl).append(this._leftBtn, this._rightBtn);
      } else if (this.options.selects != null) {
        $(this._boxTitle).prepend(pipeline);
        formBtn = document.createElement("form");
        formBtn.name = "form-" + this.options.container;
        formBtn.className = "form-inline";
        this._formBtn = formBtn;
        _ref2 = this.options.selects;
        for (name in _ref2) {
          options = _ref2[name];
          select = "<select id=\"" + name + "Slct\" class=\"input-mini\" name=\"" + name + "\">";
          for (value in options) {
            key = options[value];
            select += "<option value=" + value + ">" + key + "</option>";
          }
          select += "</select>";
          $(this._formBtn).append(select);
        }
        $(this._leftCtrl).append(this._formBtn);
        $(this._leftCtrl).removeClass("btn-group");
        _ref3 = this.options.selects;
        for (name in _ref3) {
          data = _ref3[name];
          this["_" + name + "Slct"] = document["form-" + this.options.container][name];
          this._enableSelect("#" + name + "Slct");
        }
      }
      if (this.options.buttons.table) {
        tableBtn = document.createElement("button");
        tableBtn.id = this.options.container + "-btn-table";
        tableBtn.className = "btn";
        tableBtn.setAttribute('title', 'Tabela de Dados');
        this._tableBtn = tableBtn;
        tableIcon = document.createElement("i");
        tableIcon.className = "icon-table";
        this._tableIcon = tableIcon;
        $(this._tableBtn).append(this._tableIcon);
        $(this._rightCtrl).append(this._tableBtn);
        this._boxTable = [];
        width = 1384 / this.options.numberOfBox;
        for (i = _k = 0, _ref4 = this.options.numberOfBox - 1; 0 <= _ref4 ? _k <= _ref4 : _k >= _ref4; i = 0 <= _ref4 ? ++_k : --_k) {
          boxTable = document.createElement("div");
          boxTable.id = "table-" + this.options.container;
          boxTable.className = "box-content-table";
          if (this.options.numberOfBox > 1) {
            $(boxTable).attr('style', 'margin-left:' + parseFloat(width * i) + 'px;width: ' + width + 'px; border-' + (i === 0 ? 'right: 0; float: left' : 'left: 0; float: left;'));
          }
          this._boxTable[i] = boxTable;
        }
        $(this._box).append(this._boxTable);
        this._enableTable();
      }
      if (this.options.buttons["export"]) {
        exportBtn = document.createElement("button");
        exportBtn.id = this.options.container + "-btn-export";
        exportBtn.setAttribute('title', 'Exportar Dados');
        exportBtn.className = "btn";
        this._exportBtn = exportBtn;
        exportIcon = document.createElement("i");
        exportIcon.className = "icon-download-alt";
        this._exportIcon = exportIcon;
        $(this._exportBtn).append(this._exportIcon);
        $(this._rightCtrl).append(this._exportBtn);
        this._enableExport();
      }
      if (this.options.buttons.minimize) {
        minBtn = document.createElement("button");
        minBtn.id = this.options.container + "-btn-minimize";
        minBtn.setAttribute('title', 'Esconder/Mostrar Gráfico');
        minBtn.className = "btn";
        this._minBtn = minBtn;
        minIcon = document.createElement("i");
        minIcon.className = "icon-chevron-up";
        this._minIcon = minIcon;
        $(this._minBtn).append(this._minIcon);
        $(this._rightCtrl).append(this._minBtn);
        this._enableMinimize();
      }
      if (this.options.buttons.maximize) {
        maxBtn = document.createElement("button");
        maxBtn.id = this.options.container + "-btn-maximize";
        maxBtn.setAttribute('title', 'Ativar/Desativar Tela Cheia');
        maxBtn.className = "btn";
        this._maxBtn = maxBtn;
        maxIcon = document.createElement("i");
        maxIcon.className = "icon-resize-full";
        this._maxIcon = maxIcon;
        $(this._maxBtn).append(this._maxIcon);
        $(this._rightCtrl).append(this._maxBtn);
        this._enableMaximize();
      }
      if (this.options.buttons.close) {
        closeBtn = document.createElement("button");
        closeBtn.id = this.options.container + "-btn-close";
        closeBtn.className = "btn";
        this._closeBtn = closeBtn;
        closeIcon = document.createElement("i");
        closeIcon.className = "icon-remove";
        this._closeIcon = closeIcon;
        $(this._closeBtn).append(this._closeIcon);
        $(this._rightCtrl).append(this._closeBtn);
        return this._enableClose();
      }
    };

    Container.prototype._enableMinimize = function() {
      return $(this._minBtn).on("click", (function(_this) {
        return function(event) {
          var i, _i, _j, _ref, _ref1, _results;
          event.preventDefault();
          if ($(_this._boxContent[0]).is(":visible")) {
            _this._minIcon.className = "icon-chevron-down";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", true);
              $(_this._delBtn).prop("disabled", true);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", true);
              $(_this._rightBtn).prop("disabled", true);
            }
          } else {
            _this._minIcon.className = "icon-chevron-up";
            if (_this.options.buttons.minusplus) {
              $(_this._addBtn).prop("disabled", false);
              $(_this._delBtn).prop("disabled", false);
            } else if (_this.options.buttons.arrows) {
              $(_this._leftBtn).prop("disabled", false);
              $(_this._rightBtn).prop("disabled", false);
            }
          }
          if ($(_this._boxTable[0]).is(":visible")) {
            for (i = _i = 0, _ref = _this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
              $(_this._boxTable[i]).slideToggle("fast", "linear");
            }
          }
          _results = [];
          for (i = _j = 0, _ref1 = _this.options.numberOfBox - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            _results.push($(_this._boxContent[i]).slideToggle("fast", "linear"));
          }
          return _results;
        };
      })(this));
    };

    Container.prototype._enableMaximize = function() {
      return $(this._maxBtn).on("click", (function(_this) {
        return function(event) {
          var i, _i, _j, _ref, _ref1;
          event.preventDefault();
          if (_this._maxIcon.className === "icon-resize-full") {
            _this.defaultClass = _this._container.className;
            $(_this._minBtn).prop("disabled", true);
            $(_this._closeBtn).prop("disabled", true);
            _this._maxIcon.className = "icon-resize-small";
            $("#navbar").hide();
          } else {
            $(_this._minBtn).prop("disabled", false);
            $(_this._closeBtn).prop("disabled", false);
            _this._maxIcon.className = "icon-resize-full";
            $("#navbar").show();
          }
          for (i = _i = 0, _ref = _this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            $(_this._boxTable[i]).hide();
            $(_this._boxTable[i]).toggleClass("box-table-overlay");
          }
          _this._tableIcon.className = "icon-table";
          $(_this._container).toggleClass(_this.defaultClass);
          $(_this._container).toggleClass("box-overlay");
          $("body").toggleClass("body-overlay");
          for (i = _j = 0, _ref1 = _this.options.numberOfBox - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            $(_this._boxContent[i]).toggleClass("content-overlay");
            $(_this._boxTable[i]).toggleClass("content-overlay");
            $(_this._boxContent[i]).hide();
            $(_this._boxContent[i]).fadeToggle(500, "linear");
          }
          return _this.drawChart();
        };
      })(this));
    };

    Container.prototype._enableClose = function() {
      return $(this._closeBtn).on("click", (function(_this) {
        return function(event) {
          event.preventDefault();
          return $(_this._container).hide("slide", "linear", 600);
        };
      })(this));
    };

    Container.prototype._enableSelect = function(select) {
      return $(select).on("change", (function(_this) {
        return function(event) {
          return _this.drawChart();
        };
      })(this));
    };

    Container.prototype._loadScreen = function() {
      if (!$(this._boxLoad).is(':visible')) {
        $(this._boxLoad).show();
        return $(this._boxContent[0]).hide();
      }
    };

    Container.prototype._chartScreen = function() {
      if (!$(this._boxContent).is(':visible')) {
        $(this._boxContent[0]).show();
        return $(this._boxLoad).hide();
      }
    };

    return Container;

  })();

  H5.Charts.GoogleCharts = (function(_super) {
    __extends(GoogleCharts, _super);

    function GoogleCharts() {
      GoogleCharts.__super__.constructor.apply(this, arguments);
      this.createChart();
    }

    GoogleCharts.prototype.createDataTable = function() {
      var i, _i, _ref, _results;
      this.data = [];
      _results = [];
      for (i = _i = 0, _ref = this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.data[i] = new google.visualization.DataTable());
      }
      return _results;
    };

    GoogleCharts.prototype.createChart = function() {
      var i, _i, _j, _ref, _ref1;
      this.chart = [];
      if (this.options.type === "Gauge") {
        for (i = _i = 0, _ref = this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.chart[i] = new google.visualization.Gauge(this._boxContent[i]);
        }
      } else {
        for (i = _j = 0, _ref1 = this.options.numberOfBox - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          this.chart[i] = new google.visualization[this.options.type + "Chart"](this._boxContent[i]);
        }
      }
      return this._detectScreenChanges();
    };

    GoogleCharts.prototype._detectScreenChanges = function() {
      var orientationEvent, supportsOrientationChange;
      supportsOrientationChange = "onorientationchange" in window;
      orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
      return window.addEventListener(orientationEvent, ((function(_this) {
        return function() {
          if ($(_this._boxContent[0]).is(":visible") && !_this.options.resizing) {
            _this.options.resizing = true;
            _this.drawChart();
            return _this.options.resizing = false;
          }
        };
      })(this)), false);
    };

    GoogleCharts.prototype._enableTable = function() {
      return $(this._tableBtn).on("click", (function(_this) {
        return function(event) {
          var i, visualization, _i, _j, _k, _ref, _ref1, _ref2;
          event.preventDefault();
          for (i = _i = 0, _ref = _this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            if ($(_this._boxContent[i]).is(":hidden")) {
              _this._minIcon.className = "icon-chevron-up";
              $(_this._boxContent[i]).fadeToggle('fast', 'linear');
            }
          }
          for (i = _j = 0, _ref1 = _this.options.numberOfBox - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            $(_this._boxTable[i]).fadeToggle('fast', 'linear');
          }
          if (_this._tableIcon.className === "icon-table") {
            _this._tableIcon.className = "icon-bar-chart";
            for (i = _k = 0, _ref2 = _this.options.numberOfBox - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              visualization = new google.visualization.Table(_this._boxTable[i]);
              visualization.draw(_this.data[i], null);
            }
          } else {
            _this._tableIcon.className = "icon-table";
          }
          return $(_this._leftBtn).add(_this._rightBtn).add(_this._addBtn).add(_this._delBtn).on("click", function(event) {
            var _l, _ref3, _results;
            _results = [];
            for (i = _l = 0, _ref3 = _this.options.numberOfBox - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
              if ($(_this._boxTable[i]).is(":visible")) {
                visualization = new google.visualization.Table(_this._boxTable[i]);
                _results.push(visualization.draw(_this.data, null));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          });
        };
      })(this));
    };

    GoogleCharts.prototype._enableExport = function() {
      var generateCSV;
      generateCSV = (function(_this) {
        return function() {
          var col, data, i, line, numberOfColumns, numberOfRows, row, str, title, value, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3;
          str = "";
          line = "";
          numberOfColumns = 0;
          numberOfRows = 0;
          for (i = _i = 0, _ref = _this.options.numberOfBox - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            data = _this.data[i];
            for (col = _j = 0, _ref1 = data.getNumberOfColumns(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
              title = data.getColumnLabel(col);
              line += "\"" + title + "\",";
            }
            if (data.getNumberOfRows() > numberOfRows) {
              numberOfRows = data.getNumberOfRows();
            }
          }
          str += line + "\r\n";
          for (row = _k = 0; 0 <= numberOfRows ? _k <= numberOfRows : _k >= numberOfRows; row = 0 <= numberOfRows ? ++_k : --_k) {
            line = "";
            for (i = _l = 0, _ref2 = _this.options.numberOfBox - 1; 0 <= _ref2 ? _l <= _ref2 : _l >= _ref2; i = 0 <= _ref2 ? ++_l : --_l) {
              for (col = _m = 0, _ref3 = _this.data[i].getNumberOfColumns(); 0 <= _ref3 ? _m <= _ref3 : _m >= _ref3; col = 0 <= _ref3 ? ++_m : --_m) {
                value = _this.data[i].getFormattedValue(row, col) ? _this.data[i].getFormattedValue(row, col) : '';
                line += "\"" + value + "\",";
              }
            }
            str += line + "\r\n";
          }
          return str;
        };
      })(this);
      return $(this._exportBtn).click(function() {
        var csv;
        csv = generateCSV();
        return window.open("data:text/csv;charset=utf-8," + escape(csv));
      });
    };

    return GoogleCharts;

  })(H5.Charts.Container);

  H5.Charts.SmallContainer = (function() {
    SmallContainer.prototype.options = {
      type: null,
      container: null,
      title: "",
      popover: false
    };

    function SmallContainer(options) {
      this.options = $.extend({}, this.options, options);
      this._createContainer();
    }

    SmallContainer.prototype._createContainer = function() {
      var leftCtrl, rightCtrl;
      this._container = document.getElementById(this.options.container);
      leftCtrl = document.createElement("div");
      leftCtrl.className = "left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "right";
      this._rightCtrl = rightCtrl;
      $(this._container).append(this._leftCtrl, this._rightCtrl);
      if (this.options.popover) {
        $(this._container).addClass("popover-" + this.options.container);
        return this._createPopover();
      }
    };

    SmallContainer.prototype._createPopover = function() {
      var html, placement, trigger;
      placement = "bottom";
      trigger = "hover";
      html = true;
      return $(".popover-" + this.options.container).popover({
        placement: placement,
        delay: {
          show: 700,
          hide: 300
        },
        content: "<span>" + this.options.popover + "</span>",
        trigger: trigger,
        html: html
      });
    };

    return SmallContainer;

  })();

  H5.Charts.Knobs = (function(_super) {
    __extends(Knobs, _super);

    function Knobs() {
      return Knobs.__super__.constructor.apply(this, arguments);
    }

    Knobs.prototype.updateInfo = function(value) {
      $(this._rightCtrl).html("<strong>" + value + "%</strong><br/> " + this.options.title);
      return this._updateChart(parseFloat(value));
    };

    Knobs.prototype._createContainer = function() {
      var dial;
      Knobs.__super__._createContainer.apply(this, arguments);
      dial = document.createElement("input");
      dial.type = "text";
      dial.className = "dial";
      this._dial = dial;
      $(this._leftCtrl).append(this._dial);
      return this._createChart();
    };

    Knobs.prototype._createChart = function() {
      $(this._dial).knob({
        min: -100,
        max: 100,
        bgColor: "#DEDEDE",
        fgColor: "#DEDEDE",
        angleOffset: -125,
        angleArc: 250,
        readOnly: true,
        width: 58,
        height: 58,
        thickness: 0.5,
        displayInput: false,
        color: this.options.color,
        draw: function() {
          var color, value, _max, _min;
          value = this.val();
          _min = this.o.min;
          _max = this.o.max;
          if (this.o.color === "coldtohot") {
            if ((_min <= value && value <= _min * 0.3)) {
              color = pusher.color("#67C2EF");
            } else if ((_min * 0.3 < value && value <= _max * 0.3)) {
              color = pusher.color("#CBE968");
            } else if ((_max * 0.3 < value && value <= _max * 0.7)) {
              color = pusher.color("#FABB3D");
            } else if ((_max * 0.7 < value && value <= _max * 0.9)) {
              color = pusher.color("#FA603D");
            } else {
              color = pusher.color("#FF5454");
            }
          } else {
            if (value <= 0) {
              color = pusher.color("#D0FC3F");
            } else if ((0 < value && value <= _max * 0.6)) {
              color = pusher.color("#FCAC0A");
            } else {
              color = pusher.color("#FC2121");
            }
          }
          return this.o.fgColor = color.html();
        }
      });
      return $(this._dial).val(0).trigger("change");
    };

    Knobs.prototype._updateChart = function(total) {
      var dial;
      dial = $(this._leftCtrl).find('.dial');
      if (!H5.isMobile.any()) {
        return $({
          value: dial.val()
        }).animate({
          value: total
        }, {
          duration: 2000,
          step: function() {
            return dial.val(Math.floor(this.value)).trigger("change");
          }
        });
      } else {
        return dial.val(Math.floor(total)).trigger("change");
      }
    };

    return Knobs;

  })(H5.Charts.SmallContainer);

  H5.Charts.Sparks = (function(_super) {
    __extends(Sparks, _super);

    function Sparks() {
      return Sparks.__super__.constructor.apply(this, arguments);
    }

    Sparks.prototype.updateInfo = function(data, value) {
      $(this._rightCtrl).html("<strong>" + value + "</strong><br /> " + this.options.title);
      return this._updateChart(data);
    };

    Sparks.prototype._createContainer = function() {
      var spark;
      Sparks.__super__._createContainer.apply(this, arguments);
      spark = document.createElement("div");
      spark.className = "minichart";
      this._spark = spark;
      return $(this._leftCtrl).append(this._spark);
    };

    Sparks.prototype._updateChart = function(data) {
      return $(this._spark).sparkline(data, {
        width: 58,
        height: 62,
        lineColor: "#2FABE9",
        fillColor: "#67C2EF",
        spotColor: "#CBE968",
        maxSpotColor: "#FF5454",
        minSpotColor: "#67C2EF",
        spotRadius: 1.5,
        lineWidth: 1
      });
    };

    return Sparks;

  })(H5.Charts.SmallContainer);

}).call(this);
