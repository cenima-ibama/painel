// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.H5 = (function() {
    function H5() {}

    H5.prototype.version = 0.6;

    H5.prototype.author = "Helmuth Saatkamp <helmuthdu@gmail.com>";

    H5.prototype.getURLParam = function(param) {
      var compareKeyValuePair, comparisonResult, i, params, search;

      search = window.location.search.substring(1);
      compareKeyValuePair = function(pair) {
        var decodedKey, decodedValue, key_value;

        key_value = pair.split("=");
        decodedKey = decodeURIComponent(key_value[0]);
        decodedValue = decodeURIComponent(key_value[1]);
        if (decodedKey === param) {
          return decodedValue;
        }
        return null;
      };
      comparisonResult = null;
      if (search.indexOf("&") > -1) {
        params = search.split("&");
        i = 0;
        while (i < params.length) {
          comparisonResult = compareKeyValuePair(params[i]);
          if (comparisonResult !== null) {
            break;
          }
          i++;
        }
      } else {
        comparisonResult = compareKeyValuePair(search);
      }
      return comparisonResult;
    };

    return H5;

  })();

  H5.PgRest = (function() {
    PgRest.prototype.options = {
      url: null,
      restService: null,
      table: null,
      fields: null,
      parameters: null,
      order: null,
      limit: null
    };

    PgRest.prototype.data = null;

    function PgRest(options) {
      if (options.url.substr(options.url.length - 1, 1) !== "/") {
        options.url += "/";
      }
      this.options = $.extend(this.options, options);
    }

    PgRest.prototype.request = function(service) {
      var query, url;

      if (service) {
        this.options.restService = "ws_geo_" + service + ".php";
      } else {
        this.options.restService = "ws_geo_attributequery.php";
      }
      url = this.options.url + "v1/" + this.options.restService;
      query = {};
      if (this.options.table) {
        query.table = this.options.table;
      }
      if (this.options.parameters) {
        query.parameters = this.options.parameters;
      }
      if (this.options.fields) {
        query.fields = this.options.fields;
      }
      if (this.options.order) {
        query.order = this.options.order;
      }
      if (this.options.limit) {
        query.limit = this.options.limit;
      }
      this._get(url, query);
      return this.data;
    };

    PgRest.prototype._get = function(url, query) {
      var _this = this;

      return $.ajax({
        type: "GET",
        async: false,
        url: url,
        data: query,
        dataType: "jsonp",
        success: function(data) {
          return _this._done(data);
        },
        error: function(error, status, desc) {
          return console.log(status, desc);
        }
      });
    };

    PgRest.prototype._done = function(data) {
      return this.data = data;
    };

    return PgRest;

  })();

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  H5.Charts = (function() {
    function Charts(options) {
      var defaultOptions;

      defaultOptions = {
        type: null,
        container: null,
        period: 1,
        started: true,
        title: "",
        defaultClass: "",
        selects: void 0,
        resizing: 0,
        buttons: {
          minusplus: false,
          arrows: false,
          minimize: false,
          maximize: false,
          close: false
        }
      };
      this.options = $.extend(defaultOptions, options);
    }

    Charts.prototype.createContainer = function() {
      var addBtn, addIcon, chartContent, chartHeader, chartTitle, closeBtn, closeIcon, delBtn, delIcon, formBtn, leftBtn, leftCtrl, leftIcon, maxBtn, maxIcon, minBtn, minIcon, pipeline, rightBtn, rightCtrl, rightIcon,
        _this = this;

      this._container = document.getElementById(this.options.container);
      chartHeader = document.createElement("div");
      chartHeader.className = "chart-header";
      this._chartHeader = chartHeader;
      chartTitle = document.createElement("h2");
      chartTitle.innerHTML = this.options.title;
      this._chartTitle = chartTitle;
      leftCtrl = document.createElement("div");
      leftCtrl.className = "btn-group chart-icon btn-left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "btn-group chart-icon btn-right";
      this._rightCtrl = rightCtrl;
      chartContent = document.createElement("div");
      chartContent.id = "chart-" + this.options.container;
      chartContent.className = "chart-content";
      this._chartContent = chartContent;
      $(this._chartHeader).append(this._leftCtrl, this._chartTitle, this._rightCtrl);
      $(this._container).append(this._chartHeader, this._chartContent);
      pipeline = "<span class=\"break\"></span>";
      if (this.options.buttons.minusplus) {
        $(this._chartTitle).prepend(pipeline);
        delBtn = document.createElement("button");
        delBtn.id = this.options.container + "-btn-minus";
        delBtn.className = "btn";
        this._delBtn = delBtn;
        delIcon = document.createElement("i");
        delIcon.className = "icon-minus";
        this._delIcon = delIcon;
        $(this._delBtn).append(this._delIcon);
        addBtn = document.createElement("button");
        addBtn.id = this.options.container + "-btn-plus";
        addBtn.className = "btn";
        this._addBtn = addBtn;
        addIcon = document.createElement("i");
        addIcon.className = "icon-plus";
        this._addIcon = addIcon;
        $(this._addBtn).append(this._addIcon);
        $(this._leftCtrl).append(this._delBtn, this._addBtn);
      } else if (this.options.buttons.arrows) {
        $(this._chartTitle).prepend(pipeline);
        leftBtn = document.createElement("button");
        leftBtn.id = this.options.container + "-btn-left";
        leftBtn.className = "btn";
        this._leftBtn = leftBtn;
        leftIcon = document.createElement("i");
        leftIcon.className = "icon-arrow-left";
        this._leftIcon = leftIcon;
        $(this._leftBtn).append(this._leftIcon);
        rightBtn = document.createElement("button");
        rightBtn.id = this.options.container + "-btn-right";
        rightBtn.className = "btn";
        this._rightBtn = rightBtn;
        rightIcon = document.createElement("i");
        rightIcon.className = "icon-arrow-right";
        this._rightIcon = rightIcon;
        $(this._rightBtn).append(this._rightIcon);
        $(this._leftCtrl).append(this._leftBtn, this._rightBtn);
      } else if (this.options.selects != null) {
        $(this._chartTitle).prepend(pipeline);
        formBtn = document.createElement("form");
        formBtn.name = "form-" + this.options.container;
        formBtn.className = "form-inline";
        this._formBtn = formBtn;
        $.each(this.options.selects, function(name, options) {
          var select;

          select = "<select id=\"" + name + "Slct\" class=\"input-mini\" name=\"" + name + "\">";
          $.each(options, function(value, key) {
            return select += "<option value=" + value + ">" + key + "</option>";
          });
          select += "</select>";
          return $(_this._formBtn).append(select);
        });
        $(this._leftCtrl).append(this._formBtn);
        $(this._leftCtrl).removeClass("btn-group");
        $.each(this.options.selects, function(name, data) {
          _this["_" + name + "Slct"] = document["form-" + _this.options.container][name];
          return _this.enableSelect("#" + name + "Slct");
        });
      }
      if (this.options.buttons.minimize) {
        minBtn = document.createElement("button");
        minBtn.id = this.options.container + "-btn-minimize";
        minBtn.className = "btn";
        this._minBtn = minBtn;
        minIcon = document.createElement("i");
        minIcon.className = "icon-chevron-up";
        this._minIcon = minIcon;
        $(this._minBtn).append(this._minIcon);
        $(this._rightCtrl).append(this._minBtn);
        this.enableMinimize();
      }
      if (this.options.buttons.maximize) {
        maxBtn = document.createElement("button");
        maxBtn.id = this.options.container + "-btn-maximize";
        maxBtn.className = "btn";
        this._maxBtn = maxBtn;
        maxIcon = document.createElement("i");
        maxIcon.className = "icon-resize-full";
        this._maxIcon = maxIcon;
        $(this._maxBtn).append(this._maxIcon);
        $(this._rightCtrl).append(this._maxBtn);
        this.enableMaximize();
      }
      if (this.options.buttons.close) {
        closeBtn = document.createElement("button");
        closeBtn.id = this.options.container + "-btn-close";
        closeBtn.className = "btn";
        this._closeBtn = closeBtn;
        closeIcon = document.createElement("i");
        closeIcon.className = "icon-remove";
        this._closeIcon = closeIcon;
        $(this._closeBtn).append(this._closeIcon);
        $(this._rightCtrl).append(this._closeBtn);
        return this.enableClose();
      }
    };

    Charts.prototype.createMinimalContainer = function() {
      var chartContent;

      this._container = document.getElementById(this.options.container);
      chartContent = document.createElement("div");
      chartContent.id = "chart-" + this.options.container;
      chartContent.className = "chart-content-small";
      this._chartContent = chartContent;
      return $(this._container).append(this._chartContent);
    };

    Charts.prototype.changeTitle = function(title) {
      var pipeline;

      $(this._chartTitle).html(title);
      if (this.options.buttons.arrows || this.options.buttons.minusplus || (this.options.selects != null)) {
        pipeline = "<span class=\"break\"></span>";
        return $(this._chartTitle).prepend(pipeline);
      }
    };

    Charts.prototype.enableMinimize = function() {
      var _this = this;

      return $(this._minBtn).on("click", function(event) {
        event.preventDefault();
        if ($(_this._chartContent).is(":visible")) {
          _this._minIcon.className = "icon-chevron-down";
          if (_this.options.buttons.minusplus) {
            $(_this._addBtn).prop("disabled", true);
            $(_this._delBtn).prop("disabled", true);
          } else if (_this.options.buttons.arrows) {
            $(_this._leftBtn).prop("disabled", true);
            $(_this._rightBtn).prop("disabled", true);
          }
        } else {
          _this._minIcon.className = "icon-chevron-up";
          if (_this.options.buttons.minusplus) {
            $(_this._addBtn).prop("disabled", false);
            $(_this._delBtn).prop("disabled", false);
          } else if (_this.options.buttons.arrows) {
            $(_this._leftBtn).prop("disabled", false);
            $(_this._rightBtn).prop("disabled", false);
          }
        }
        return $(_this._chartContent).slideToggle();
      });
    };

    Charts.prototype.enableMaximize = function() {
      var _this = this;

      return $(this._maxBtn).on("click", function(event) {
        event.preventDefault();
        if (_this._maxIcon.className === "icon-resize-full") {
          _this.defaultClass = _this._container.className;
          $(_this._minBtn).prop("disabled", true);
          $(_this._closeBtn).prop("disabled", true);
          _this._maxIcon.className = "icon-resize-small";
          $("#navbar").hide();
        } else {
          $(_this._minBtn).prop("disabled", false);
          $(_this._closeBtn).prop("disabled", false);
          _this._maxIcon.className = "icon-resize-full";
          $("#navbar").show();
        }
        $(_this._container).toggleClass(_this.defaultClass);
        $(_this._container).toggleClass("chart-overlay");
        $(_this._chartContent).toggleClass("chart-content-overlay");
        $(_this._chartContent).hide();
        $(_this._chartContent).fadeToggle(500);
        return _this.drawChart();
      });
    };

    Charts.prototype.enableClose = function() {
      var _this = this;

      return $(this._closeBtn).on("click", function(event) {
        event.preventDefault();
        return $(_this._container).hide("slide", {}, 600);
      });
    };

    Charts.prototype.enableSelect = function(select) {
      var _this = this;

      return $(select).on("change", function(event) {
        return _this.drawChart();
      });
    };

    return Charts;

  })();

  H5.GoogleCharts = (function(_super) {
    __extends(GoogleCharts, _super);

    function GoogleCharts() {
      _ref = GoogleCharts.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GoogleCharts.prototype.dataTable = function() {
      return this.data = new google.visualization.DataTable();
    };

    GoogleCharts.prototype.createChart = function() {
      if (this.options.type === "Gauge") {
        this.chart = new google.visualization.Gauge(this._chartContent);
      } else {
        this.chart = new google.visualization[this.options.type + "Chart"](this._chartContent);
      }
      this.options.started = false;
      return this.detectScreenChanges();
    };

    GoogleCharts.prototype.detectScreenChanges = function() {
      var orientationEvent, supportsOrientationChange,
        _this = this;

      supportsOrientationChange = "onorientationchange" in window;
      orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
      return window.addEventListener(orientationEvent, (function() {
        return _this.drawChart();
      }), false);
    };

    return GoogleCharts;

  })(H5.Charts);

  H5.MiniCharts = (function() {
    function MiniCharts(options) {
      var defaultOptions;

      defaultOptions = {
        type: null,
        container: null,
        title: "",
        popover: false
      };
      this.options = $.extend(defaultOptions, options);
    }

    MiniCharts.prototype.createContainer = function() {
      var leftCtrl, rightCtrl;

      this._container = document.getElementById(this.options.container);
      leftCtrl = document.createElement("div");
      leftCtrl.className = "left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "right";
      this._rightCtrl = rightCtrl;
      $(this._container).append(this._leftCtrl, this._rightCtrl);
      if (this.options.popover) {
        $(this._container).addClass("popover-" + this.options.container);
        return this.createPopover();
      }
    };

    MiniCharts.prototype.createPopover = function() {
      var html, placement, trigger;

      placement = "bottom";
      trigger = "hover";
      html = true;
      return $(".popover-" + this.options.container).popover({
        placement: placement,
        delay: {
          show: 700,
          hide: 300
        },
        content: "<span>" + this.options.popover + "</span>",
        trigger: trigger,
        html: html
      });
    };

    return MiniCharts;

  })();

  H5.Knobs = (function(_super) {
    __extends(Knobs, _super);

    function Knobs() {
      _ref1 = Knobs.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Knobs.prototype.createContainer = function() {
      var dial;

      Knobs.__super__.createContainer.apply(this, arguments);
      dial = document.createElement("input");
      dial.type = "text";
      dial.className = "dial";
      this._dial = dial;
      $(this._leftCtrl).append(this._dial);
      return this.createChart();
    };

    Knobs.prototype.createChart = function() {
      $(this._dial).knob({
        min: -100,
        max: 100,
        bgColor: "#DEDEDE",
        fgColor: "#DEDEDE",
        angleOffset: -125,
        angleArc: 250,
        readOnly: true,
        width: 58,
        height: 58,
        thickness: 0.5,
        displayInput: false,
        color: "alert",
        draw: function() {
          var color, value, _max, _min;

          value = this.val();
          _min = this.o.min;
          _max = this.o.max;
          if (this.color === "coldtohot") {
            if ((_min <= value && value <= _min * 0.3)) {
              color = pusher.color("#67C2EF");
            } else if ((_min * 0.3 < value && value <= _max * 0.3)) {
              color = pusher.color("#CBE968");
            } else if ((_max * 0.3 < value && value <= _max * 0.7)) {
              color = pusher.color("#FABB3D");
            } else if ((_max * 0.7 < value && value <= _max * 0.9)) {
              color = pusher.color("#FA603D");
            } else {
              color = pusher.color("#FF5454");
            }
          } else {
            if (value <= 0) {
              color = pusher.color("#D0FC3F");
            } else if ((0 < value && value <= _max * 0.6)) {
              color = pusher.color("#FCAC0A");
            } else {
              color = pusher.color("#FC2121");
            }
          }
          return this.o.fgColor = color.html();
        }
      });
      return $(this._dial).val(0).trigger("change");
    };

    Knobs.prototype.updateInfo = function(value) {
      $(this._rightCtrl).html("<strong>" + value + "%</strong><br/> " + this.options.title);
      return this.updateChart(parseFloat(value));
    };

    Knobs.prototype.updateChart = function(total) {
      var dial;

      dial = $(this._leftCtrl).find('.dial');
      return $({
        value: dial.val()
      }).animate({
        value: total
      }, {
        duration: 2000,
        easing: "easeOutSine",
        step: function() {
          return dial.val(Math.floor(this.value)).trigger("change");
        }
      });
    };

    return Knobs;

  })(H5.MiniCharts);

  H5.Sparks = (function(_super) {
    __extends(Sparks, _super);

    function Sparks() {
      _ref2 = Sparks.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Sparks.prototype.createContainer = function() {
      var spark;

      Sparks.__super__.createContainer.apply(this, arguments);
      spark = document.createElement("div");
      spark.className = "minichart";
      this._spark = spark;
      return $(this._leftCtrl).append(this._spark);
    };

    Sparks.prototype.updateInfo = function(data, value) {
      $(this._rightCtrl).html("<strong>" + value + "</strong><br /> " + this.options.title);
      return this.updateChart(data);
    };

    Sparks.prototype.updateChart = function(data) {
      return $(this._spark).sparkline(data, {
        width: 58,
        height: 62,
        lineColor: "#2FABE9",
        fillColor: "#67C2EF",
        spotColor: "#CBE968",
        maxSpotColor: "#FF5454",
        minSpotColor: "#67C2EF",
        spotRadius: 1.5,
        lineWidth: 1
      });
    };

    return Sparks;

  })(H5.MiniCharts);

}).call(this);
