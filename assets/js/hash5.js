// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.H5 = {
    version: 0.6,
    company: "Hexgis <www.hexgis.com>",
    author: "Helmuth Saatkamp <helmuthdu@gmail.com>"
  };

  H5.PgRest = (function() {
    PgRest.prototype.options = {
      url: null,
      restService: null,
      table: null,
      fields: null,
      parameters: null,
      order: null,
      limit: null
    };

    PgRest.prototype.data = null;

    function PgRest(options) {
      if (options.url.substr(options.url.length - 1, 1) !== "/") {
        options.url += "/";
      }
      this.options = $.extend(this.options, options);
    }

    PgRest.prototype.request = function(service) {
      var query, url;

      if (service) {
        this.options.restService = "ws_geo_" + service + ".php";
      } else {
        this.options.restService = "ws_geo_attributequery.php";
      }
      url = this.options.url + "v1/" + this.options.restService;
      query = {};
      if (this.options.table) {
        query.table = this.options.table;
      }
      if (this.options.parameters) {
        query.parameters = this.options.parameters;
      }
      if (this.options.fields) {
        query.fields = this.options.fields;
      }
      if (this.options.order) {
        query.order = this.options.order;
      }
      if (this.options.limit) {
        query.limit = this.options.limit;
      }
      this._get(url, query);
      return this.data;
    };

    PgRest.prototype.getURLParam = function(param) {
      var compareKeyValuePair, comparisonResult, i, params, search;

      search = window.location.search.substring(1);
      compareKeyValuePair = function(pair) {
        var decodedKey, decodedValue, key_value;

        key_value = pair.split("=");
        decodedKey = decodeURIComponent(key_value[0]);
        decodedValue = decodeURIComponent(key_value[1]);
        if (decodedKey === param) {
          return decodedValue;
        }
        return null;
      };
      comparisonResult = null;
      if (search.indexOf("&") > -1) {
        params = search.split("&");
        i = 0;
        while (i < params.length) {
          comparisonResult = compareKeyValuePair(params[i]);
          if (comparisonResult !== null) {
            break;
          }
          i++;
        }
      } else {
        comparisonResult = compareKeyValuePair(search);
      }
      return comparisonResult;
    };

    PgRest.prototype._get = function(url, query) {
      var _this = this;

      return $.ajax({
        type: "GET",
        async: false,
        url: url,
        data: query,
        dataType: "jsonp",
        success: function(data) {
          return _this._done(data);
        },
        error: function(error, status, desc) {
          return console.log(status, desc);
        }
      });
    };

    PgRest.prototype._done = function(data) {
      return this.data = data;
    };

    return PgRest;

  })();

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  H5.Charts = (function() {
    function Charts(options) {
      var defaultOptions;

      defaultOptions = {
        type: null,
        container: null,
        period: 1,
        started: true,
        title: "",
        defaultClass: "",
        selects: void 0,
        resizing: 0,
        buttons: {
          minusplus: false,
          arrows: false,
          minimize: false,
          maximize: false,
          close: false
        }
      };
      this.options = $.extend(defaultOptions, options);
    }

    Charts.prototype.createContainer = function() {
      var addBtn, addIcon, chartContent, chartHeader, chartTitle, closeBtn, closeIcon, delBtn, delIcon, formBtn, leftBtn, leftCtrl, leftIcon, maxBtn, maxIcon, minBtn, minIcon, pipeline, rightBtn, rightCtrl, rightIcon,
        _this = this;

      this._container = document.getElementById(this.options.container);
      chartHeader = document.createElement("div");
      chartHeader.className = "chart-header";
      this._chartHeader = chartHeader;
      chartTitle = document.createElement("h2");
      chartTitle.innerHTML = this.options.title;
      this._chartTitle = chartTitle;
      leftCtrl = document.createElement("div");
      leftCtrl.className = "btn-group chart-icon btn-left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "btn-group chart-icon btn-right";
      this._rightCtrl = rightCtrl;
      chartContent = document.createElement("div");
      chartContent.id = "chart-" + this.options.container;
      chartContent.className = "chart-content";
      this._chartContent = chartContent;
      $(this._chartHeader).append(this._leftCtrl, this._chartTitle, this._rightCtrl);
      $(this._container).append(this._chartHeader, this._chartContent);
      pipeline = "<span class=\"break\"></span>";
      if (this.options.buttons.minusplus) {
        $(this._chartTitle).prepend(pipeline);
        delBtn = document.createElement("button");
        delBtn.id = this.options.container + "-btn-minus";
        delBtn.className = "btn";
        this._delBtn = delBtn;
        delIcon = document.createElement("i");
        delIcon.className = "icon-minus";
        this._delIcon = delIcon;
        $(this._delBtn).append(this._delIcon);
        addBtn = document.createElement("button");
        addBtn.id = this.options.container + "-btn-plus";
        addBtn.className = "btn";
        this._addBtn = addBtn;
        addIcon = document.createElement("i");
        addIcon.className = "icon-plus";
        this._addIcon = addIcon;
        $(this._addBtn).append(this._addIcon);
        $(this._leftCtrl).append(this._delBtn, this._addBtn);
      } else if (this.options.buttons.arrows) {
        $(this._chartTitle).prepend(pipeline);
        leftBtn = document.createElement("button");
        leftBtn.id = this.options.container + "-btn-left";
        leftBtn.className = "btn";
        this._leftBtn = leftBtn;
        leftIcon = document.createElement("i");
        leftIcon.className = "icon-arrow-left";
        this._leftIcon = leftIcon;
        $(this._leftBtn).append(this._leftIcon);
        rightBtn = document.createElement("button");
        rightBtn.id = this.options.container + "-btn-right";
        rightBtn.className = "btn";
        this._rightBtn = rightBtn;
        rightIcon = document.createElement("i");
        rightIcon.className = "icon-arrow-right";
        this._rightIcon = rightIcon;
        $(this._rightBtn).append(this._rightIcon);
        $(this._leftCtrl).append(this._leftBtn, this._rightBtn);
      } else if (this.options.selects != null) {
        $(this._chartTitle).prepend(pipeline);
        formBtn = document.createElement("form");
        formBtn.name = "form-" + this.options.container;
        formBtn.className = "form-inline";
        this._formBtn = formBtn;
        $.each(this.options.selects, function(name, options) {
          var select;

          select = "<select id=\"" + name + "Slct\" class=\"input-mini\" name=\"" + name + "\">";
          $.each(options, function(value, key) {
            return select += "<option value=" + value + ">" + key + "</option>";
          });
          select += "</select>";
          return $(_this._formBtn).append(select);
        });
        $(this._leftCtrl).append(this._formBtn);
        $(this._leftCtrl).removeClass("btn-group");
        $.each(this.options.selects, function(name, data) {
          _this["_" + name + "Slct"] = document["form-" + _this.options.container][name];
          return _this.enableSelect("#" + name + "Slct");
        });
      }
      if (this.options.buttons.minimize) {
        minBtn = document.createElement("button");
        minBtn.id = this.options.container + "-btn-minimize";
        minBtn.className = "btn";
        this._minBtn = minBtn;
        minIcon = document.createElement("i");
        minIcon.className = "icon-chevron-up";
        this._minIcon = minIcon;
        $(this._minBtn).append(this._minIcon);
        $(this._rightCtrl).append(this._minBtn);
        this.enableMinimize();
      }
      if (this.options.buttons.maximize) {
        maxBtn = document.createElement("button");
        maxBtn.id = this.options.container + "-btn-maximize";
        maxBtn.className = "btn";
        this._maxBtn = maxBtn;
        maxIcon = document.createElement("i");
        maxIcon.className = "icon-resize-full";
        this._maxIcon = maxIcon;
        $(this._maxBtn).append(this._maxIcon);
        $(this._rightCtrl).append(this._maxBtn);
        this.enableMaximize();
      }
      if (this.options.buttons.close) {
        closeBtn = document.createElement("button");
        closeBtn.id = this.options.container + "-btn-close";
        closeBtn.className = "btn";
        this._closeBtn = closeBtn;
        closeIcon = document.createElement("i");
        closeIcon.className = "icon-remove";
        this._closeIcon = closeIcon;
        $(this._closeBtn).append(this._closeIcon);
        $(this._rightCtrl).append(this._closeBtn);
        return this.enableClose();
      }
    };

    Charts.prototype.createMinimalContainer = function() {
      var chartContent;

      this._container = document.getElementById(this.options.container);
      chartContent = document.createElement("div");
      chartContent.id = "chart-" + this.options.container;
      chartContent.className = "chart-content-small";
      this._chartContent = chartContent;
      return $(this._container).append(this._chartContent);
    };

    Charts.prototype.changeTitle = function(title) {
      var pipeline;

      $(this._chartTitle).html(title);
      if (this.options.buttons.arrows || this.options.buttons.minusplus || (this.options.selects != null)) {
        pipeline = "<span class=\"break\"></span>";
        return $(this._chartTitle).prepend(pipeline);
      }
    };

    Charts.prototype.enableMinimize = function() {
      var _this = this;

      return $(this._minBtn).on("click", function(event) {
        event.preventDefault();
        if ($(_this._chartContent).is(":visible")) {
          _this._minIcon.className = "icon-chevron-down";
          if (_this.options.buttons.minusplus) {
            $(_this._addBtn).prop("disabled", true);
            $(_this._delBtn).prop("disabled", true);
          } else if (_this.options.buttons.arrows) {
            $(_this._leftBtn).prop("disabled", true);
            $(_this._rightBtn).prop("disabled", true);
          }
        } else {
          _this._minIcon.className = "icon-chevron-up";
          if (_this.options.buttons.minusplus) {
            $(_this._addBtn).prop("disabled", false);
            $(_this._delBtn).prop("disabled", false);
          } else if (_this.options.buttons.arrows) {
            $(_this._leftBtn).prop("disabled", false);
            $(_this._rightBtn).prop("disabled", false);
          }
        }
        return $(_this._chartContent).slideToggle();
      });
    };

    Charts.prototype.enableMaximize = function() {
      var _this = this;

      return $(this._maxBtn).on("click", function(event) {
        event.preventDefault();
        if (_this._maxIcon.className === "icon-resize-full") {
          _this.defaultClass = _this._container.className;
          $(_this._minBtn).prop("disabled", true);
          $(_this._closeBtn).prop("disabled", true);
          _this._maxIcon.className = "icon-resize-small";
          $("#navbar").hide();
        } else {
          $(_this._minBtn).prop("disabled", false);
          $(_this._closeBtn).prop("disabled", false);
          _this._maxIcon.className = "icon-resize-full";
          $("#navbar").show();
        }
        $(_this._container).toggleClass(_this.defaultClass);
        $(_this._container).toggleClass("chart-overlay");
        $(_this._chartContent).toggleClass("chart-content-overlay");
        $(_this._chartContent).hide();
        $(_this._chartContent).fadeToggle(500);
        return _this.drawChart();
      });
    };

    Charts.prototype.enableClose = function() {
      var _this = this;

      return $(this._closeBtn).on("click", function(event) {
        event.preventDefault();
        return $(_this._container).hide("slide", {}, 600);
      });
    };

    Charts.prototype.enableSelect = function(select) {
      var _this = this;

      return $(select).on("change", function(event) {
        return _this.drawChart();
      });
    };

    return Charts;

  })();

  H5.GoogleCharts = (function(_super) {
    __extends(GoogleCharts, _super);

    function GoogleCharts() {
      _ref = GoogleCharts.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GoogleCharts.prototype.dataTable = function() {
      return this.data = new google.visualization.DataTable();
    };

    GoogleCharts.prototype.createChart = function() {
      if (this.options.type === "Gauge") {
        this.chart = new google.visualization.Gauge(this._chartContent);
      } else {
        this.chart = new google.visualization[this.options.type + "Chart"](this._chartContent);
      }
      this.options.started = false;
      return this.detectScreenChanges();
    };

    GoogleCharts.prototype.detectScreenChanges = function() {
      var orientationEvent, supportsOrientationChange,
        _this = this;

      supportsOrientationChange = "onorientationchange" in window;
      orientationEvent = (supportsOrientationChange ? "orientationchange" : "resize");
      return window.addEventListener(orientationEvent, (function() {
        return _this.drawChart();
      }), false);
    };

    return GoogleCharts;

  })(H5.Charts);

  H5.MiniCharts = (function() {
    function MiniCharts(options) {
      var defaultOptions;

      defaultOptions = {
        type: null,
        container: null,
        title: "",
        popover: false
      };
      this.options = $.extend(defaultOptions, options);
    }

    MiniCharts.prototype.createContainer = function() {
      var leftCtrl, rightCtrl;

      this._container = document.getElementById(this.options.container);
      leftCtrl = document.createElement("div");
      leftCtrl.className = "left";
      this._leftCtrl = leftCtrl;
      rightCtrl = document.createElement("div");
      rightCtrl.className = "right";
      this._rightCtrl = rightCtrl;
      $(this._container).append(this._leftCtrl, this._rightCtrl);
      if (this.options.popover) {
        $(this._container).addClass("popover-" + this.options.container);
        return this.createPopover();
      }
    };

    MiniCharts.prototype.createPopover = function() {
      var html, placement, trigger;

      placement = "bottom";
      trigger = "hover";
      html = true;
      return $(".popover-" + this.options.container).popover({
        placement: placement,
        delay: {
          show: 700,
          hide: 300
        },
        content: "<span>" + this.options.popover + "</span>",
        trigger: trigger,
        html: html
      });
    };

    return MiniCharts;

  })();

  H5.Knobs = (function(_super) {
    __extends(Knobs, _super);

    function Knobs() {
      _ref1 = Knobs.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Knobs.prototype.createContainer = function() {
      var dial;

      Knobs.__super__.createContainer.apply(this, arguments);
      dial = document.createElement("input");
      dial.type = "text";
      dial.className = "dial";
      this._dial = dial;
      $(this._leftCtrl).append(this._dial);
      return this.createChart();
    };

    Knobs.prototype.createChart = function() {
      $(this._dial).knob({
        min: -100,
        max: 100,
        bgColor: "#DEDEDE",
        fgColor: "#DEDEDE",
        angleOffset: -125,
        angleArc: 250,
        readOnly: true,
        width: 58,
        height: 58,
        thickness: 0.5,
        displayInput: false,
        color: "alert",
        draw: function() {
          var color, value, _max, _min;

          value = this.val();
          _min = this.o.min;
          _max = this.o.max;
          if (this.color === "coldtohot") {
            if ((_min <= value && value <= _min * 0.3)) {
              color = pusher.color("#67C2EF");
            } else if ((_min * 0.3 < value && value <= _max * 0.3)) {
              color = pusher.color("#CBE968");
            } else if ((_max * 0.3 < value && value <= _max * 0.7)) {
              color = pusher.color("#FABB3D");
            } else if ((_max * 0.7 < value && value <= _max * 0.9)) {
              color = pusher.color("#FA603D");
            } else {
              color = pusher.color("#FF5454");
            }
          } else {
            if (value <= 0) {
              color = pusher.color("#D0FC3F");
            } else if ((0 < value && value <= _max * 0.6)) {
              color = pusher.color("#FCAC0A");
            } else {
              color = pusher.color("#FC2121");
            }
          }
          return this.o.fgColor = color.html();
        }
      });
      return $(this._dial).val(0).trigger("change");
    };

    Knobs.prototype.updateInfo = function(value) {
      $(this._rightCtrl).html("<strong>" + value + "%</strong><br/> " + this.options.title);
      return this.updateChart(parseFloat(value));
    };

    Knobs.prototype.updateChart = function(total) {
      var dial;

      dial = $(this._leftCtrl).find('.dial');
      return $({
        value: dial.val()
      }).animate({
        value: total
      }, {
        duration: 2000,
        easing: "easeOutSine",
        step: function() {
          return dial.val(Math.floor(this.value)).trigger("change");
        }
      });
    };

    return Knobs;

  })(H5.MiniCharts);

  H5.Sparks = (function(_super) {
    __extends(Sparks, _super);

    function Sparks() {
      _ref2 = Sparks.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Sparks.prototype.createContainer = function() {
      var spark;

      Sparks.__super__.createContainer.apply(this, arguments);
      spark = document.createElement("div");
      spark.className = "minichart";
      this._spark = spark;
      return $(this._leftCtrl).append(this._spark);
    };

    Sparks.prototype.updateInfo = function(data, value) {
      $(this._rightCtrl).html("<strong>" + value + "</strong><br /> " + this.options.title);
      return this.updateChart(data);
    };

    Sparks.prototype.updateChart = function(data) {
      return $(this._spark).sparkline(data, {
        width: 58,
        height: 62,
        lineColor: "#2FABE9",
        fillColor: "#67C2EF",
        spotColor: "#CBE968",
        maxSpotColor: "#FF5454",
        minSpotColor: "#67C2EF",
        spotRadius: 1.5,
        lineWidth: 1
      });
    };

    return Sparks;

  })(H5.MiniCharts);

  H5.Leaflet = {
    layersList: null
  };

  H5.Leaflet.VectorLayer = (function() {
    VectorLayer.prototype.options = {
      fields: "",
      scaleRange: null,
      layer: null,
      uniqueField: null,
      visibleAtScale: true,
      autoUpdate: false,
      autoUpdateInterval: null,
      popupTemplate: null,
      popupOptions: {},
      singlePopup: false,
      symbology: null,
      showAll: false,
      symbology: {}
    };

    function VectorLayer(options) {
      L.setOptions(this, options);
    }

    VectorLayer.prototype.setMap = function(map) {
      var sr, z;

      if (map && this.options.map) {
        return;
      }
      if (map) {
        this.options.map = map;
        if (this.options.scaleRange && this.options.scaleRange instanceof Array && this.options.scaleRange.length === 2) {
          z = this.options.map.getZoom();
          sr = this.options.scaleRange;
          return this.options.visibleAtScale = z >= sr[0] && z <= sr[1];
        }
      }
    };

    VectorLayer.prototype._setPopupContent = function(feature) {
      var atts, popupContent, previousContent, prop, re;

      previousContent = feature.popupContent;
      atts = feature.properties;
      popupContent = void 0;
      if (typeof this.options.popupTemplate === "string") {
        popupContent = this.options.popupTemplate;
        for (prop in atts) {
          re = new RegExp("{" + prop + "}", "g");
          popupContent = popupContent.replace(re, atts[prop]);
        }
      } else if (typeof this.options.popupTemplate === "function") {
        popupContent = this.options.popupTemplate(atts);
      } else {
        return;
      }
      feature.popupContent = popupContent;
      if (feature.popup) {
        if (feature.popupContent !== previousContent) {
          return feature.popup.setContent(feature.popupContent);
        }
      } else if (this.popup && this.popup.associatedFeature === feature) {
        if (feature.popupContent !== previousContent) {
          return this.popup.setContent(feature.popupContent);
        }
      }
    };

    VectorLayer.prototype._getFeatureStyle = function(feature) {
      var att, atts, i, key, len, style;

      style = {};
      atts = feature.properties;
      if (this.options.symbology) {
        switch (this.options.symbology.type) {
          case "single":
            for (key in this.options.symbology.style) {
              style[key] = this.options.symbology.style[key];
            }
            break;
          case "unique":
            att = this.options.symbology.property;
            i = 0;
            len = this.options.symbology.values.length;
            while (i < len) {
              if (atts[att] === this.options.symbology.values[i].value) {
                for (key in this.options.symbology.values[i].style) {
                  style[key] = this.options.symbology.values[i].style[key];
                }
              }
              i++;
            }
            break;
          case "range":
            att = this.options.symbology.property;
            i = 0;
            len = this.options.symbology.ranges.length;
            while (i < len) {
              if (atts[att] >= this.options.symbology.ranges[i].range[0] && atts[att] <= this.options.symbology.ranges[i].range[1]) {
                for (key in this.options.symbology.ranges[i].style) {
                  style[key] = this.options.symbology.ranges[i].style[key];
                }
              }
              i++;
            }
        }
      }
      return style;
    };

    VectorLayer.prototype._updatePosition = function(feature) {
      var i, _i, _ref3, _results;

      if (feature.geometry.type === "Point") {
        _results = [];
        for (i = _i = 0, _ref3 = this.layer._layers.length; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
          if (feature.properties[this.options.uniqueField] === this.layer._layers[i].properties[this.options.uniqueField]) {
            _results.push(this.layer._layers[i].setLatLngs[feature.geometry.coordinates].update());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return VectorLayer;

  })();

  H5.Leaflet.PostgisLayer = (function(_super) {
    __extends(PostgisLayer, _super);

    PostgisLayer.prototype.options = {
      url: null,
      srid: null,
      geomFieldName: "the_geom",
      table: null,
      fields: null,
      where: null,
      limit: null,
      uniqueField: null
    };

    function PostgisLayer(options) {
      var i, len;

      i = 0;
      len = this._requiredParams.length;
      while (i < len) {
        if (!options[this._requiredParams[i]]) {
          throw new Error("No \"" + this._requiredParams[i] + "\" parameter found.");
        }
        i++;
      }
      L.setOptions(this, options);
      this.options.fields = (this.options.fields ? this.options.fields + "*" : "") + ", st_asgeojson(" + this.options.geomFieldName + ") as geojson";
      console.log(this.options);
      this._show();
    }

    PostgisLayer.prototype.update = function() {
      var layer;

      this._getGeoJson();
      if (!this.layer) {
        throw new Error("No layer founded");
      } else {
        return layer = new L.GeoJson(this.geoJson, {
          onEachFeature: this._updatePosition
        });
      }
    };

    PostgisLayer.prototype._requiredParams = ["url", "table"];

    PostgisLayer.prototype._show = function() {
      var layer,
        _this = this;

      this._getGeoJson();
      if (!this.layer) {
        this.layer = L.geoJson(this.geoJson, {
          style: this._getFeatureStyle,
          onEachFeature: this._setPopupContent
        });
      } else {
        layer = L.geoJson(this.geoJson, {
          onEachFeature: this._updatePosition
        });
      }
      if (this.options.autoUpdate && this.options.autoUpdateInterval) {
        return this._autoUpdateInterval = setInterval(function() {
          return _this._show();
        }, this.options.autoUpdateInterval);
      }
    };

    PostgisLayer.prototype._getGeoJson = function() {
      var i, json, len, prop, rest;

      rest = new H5.PgRest({
        url: this.options.url,
        table: this.options.table,
        fields: this.options.fields,
        parameters: this.options.where,
        limit: this.options.limit
      });
      json = rest.request();
      this.geoJson = {};
      this.geoJson.features = [];
      this.geoJson.total = json.length;
      this.geoJson.type = "FeatureCollection";
      i = 0;
      len = json.length;
      while (i < len) {
        this.geoJson.features[i] = {};
        this.geoJson.features[i].properties = {};
        for (prop in json[i]) {
          if (prop === "geojson") {
            this.geoJson.features[i].geometry = JSON.parse(json[i].geojson);
          } else if (prop !== "properties") {
            this.geoJson.features[i].properties[prop] = json[i][prop];
          }
        }
        this.geoJson.features[i].type = "Feature";
        i++;
      }
      json = null;
      return console.log(this.geoJson);
    };

    return PostgisLayer;

  })(H5.Leaflet.VectorLayer);

  H5.Leaflet.RapidEyeTMS = (function() {
    RapidEyeTMS.prototype.options = {
      url: null,
      table: null,
      numberOfLayers: 4
    };

    function RapidEyeTMS(options) {
      this.listLayers = [];
      this.layers = {};
      this.layerGroup = [];
      this.count = 1;
      L.setOptions(this, options);
      this._createTMSLayers();
      this._loadGeoJSON();
      this._addToLayerControl();
    }

    RapidEyeTMS.prototype._onEachFeature = function(feature, layer) {
      var popupContent;

      popupContent = "<p>I started out as a GeoJSON " + feature.geometry.type + ", but now I'm a Leaflet vector!</p>";
      if (feature.properties && feature.properties.popupContent) {
        popupContent += feature.properties.popupContent;
      }
      layer.bindPopup(popupContent);
      layer.on("mouseover click", function(e) {
        var tmsUrl;

        tmsUrl = feature.properties.url_tiles + "{z}/{x}/{y}.png";
        layer.setStyle({
          fillColor: "transparent",
          stroke: false
        });
        if (this._checkLayer(layer._leaflet_id)) {
          this.layers[this.count].setUrl(tmsUrl);
          this.layers[this.count].redraw();
          this.listLayers.push(layer._leaflet_id);
          if (this.listLayers.length > this.options.numberOfLayers) {
            this.listLayers.shift();
          }
          this.count++;
          if (this.count > this.options.numberOfLayers) {
            return this.count = 1;
          }
        }
      });
      return layer.on("mouseout", function(e) {
        return layer.setStyle({
          stroke: true
        });
      });
    };

    RapidEyeTMS.prototype._createTMSLayers = function() {
      var i, _results;

      i = 1;
      _results = [];
      while (i <= this.options.numberOfLayers) {
        this.layers[i] = new L.TileLayer("", {
          minZoom: 3,
          maxZoom: 17,
          tms: true
        });
        this.layerGroup.push(this.layers[i]);
        _results.push(i++);
      }
      return _results;
    };

    RapidEyeTMS.prototype._checkLayer = function(layerId) {
      var i, _i, _ref3;

      for (i = _i = 0, _ref3 = this.listLayers.length; 0 <= _ref3 ? _i <= _ref3 : _i >= _ref3; i = 0 <= _ref3 ? ++_i : --_i) {
        if (layerId === this.listLayers[i]) {
          return false;
        }
      }
      return true;
    };

    RapidEyeTMS.prototype._loadGeoJSON = function() {
      var rest;

      rest = new H5.PgRest({
        url: this.options.url,
        table: this.options.table
      });
      return this._vectors = L.geoJson(rest.request(), {
        style: {
          fillColor: "transparent",
          color: "purple",
          weight: 4
        },
        onEachFeature: this._onEachFeature
      });
    };

    RapidEyeTMS.prototype._addToLayerControl = function() {
      var rapidEyeLayer;

      rapidEyeLayer = new L.LayerGroup(this.layerGroup);
      rapidEyeLayer.addLayer(this._vectors);
      if (H5.Leaflet.layersList) {
        return H5.Leaflet.layersList.addLayer(rapidEyeLayer, "RapidEye");
      }
    };

    return RapidEyeTMS;

  })();

  H5.Leaflet.LayerControl = L.Control.extend({
    options: {
      collapsed: true,
      position: "topright",
      autoZIndex: true
    },
    initialize: function(baseLayers, options) {
      var i, _results;

      L.setOptions(this, options);
      this._layers = {};
      this._lastZIndex = 0;
      this._handlingClick = false;
      _results = [];
      for (i in baseLayers) {
        _results.push(this._addLayer(baseLayers[i], i));
      }
      return _results;
    },
    onAdd: function(map) {
      this._initLayout();
      this._update();
      map.on("layeradd", this._onLayerChange, this).on("layerremove", this._onLayerChange, this);
      return this._container;
    },
    onRemove: function(map) {
      return map.off("layeradd", this._onLayerChange).off("layerremove", this._onLayerChange);
    },
    addLayer: function(layer, name) {
      this._addLayer(layer, name);
      this._update();
      return this;
    },
    removeLayer: function(layer) {
      var id;

      id = L.stamp(layer);
      delete this._layers[id];
      this._update();
      return this;
    },
    _initLayout: function() {
      var className, container, form, link;

      className = "leaflet-control-layers";
      container = this._container = L.DomUtil.create("div", className);
      if (!L.Browser.touch) {
        L.DomEvent.disableClickPropagation(container);
        L.DomEvent.on(container, "mousewheel", L.DomEvent.stopPropagation);
      } else {
        L.DomEvent.on(container, "click", L.DomEvent.stopPropagation);
      }
      form = this._form = L.DomUtil.create("form", className + "-list form-layer-list");
      if (this.options.collapsed) {
        L.DomEvent.on(container, "mouseover", this._expand, this).on(container, "mouseout", this._collapse, this);
        link = this._layersLink = L.DomUtil.create("a", className + "-toggle", container);
        link.href = "#";
        link.title = "Layers";
        if (L.Browser.touch) {
          L.DomEvent.on(link, "click", L.DomEvent.stopPropagation).on(link, "click", L.DomEvent.preventDefault).on(link, "click", this._expand, this);
        } else {
          L.DomEvent.on(link, "focus", this._expand, this);
        }
        this._map.on("movestart", this._collapse, this);
      } else {
        this._expand();
      }
      this._baseLayersList = L.DomUtil.create("div", className + "-base", form);
      return container.appendChild(form);
    },
    _addLayer: function(layer, name) {
      var id;

      id = L.stamp(layer);
      this._layers[id] = {
        layer: layer,
        name: name
      };
      if (this.options.autoZIndex && layer.setZIndex) {
        this._lastZIndex++;
        return layer.setZIndex(this._lastZIndex);
      }
    },
    _update: function() {
      var i, obj, _results;

      if (!this._container) {
        return;
      }
      this._baseLayersList.innerHTML = "";
      i = void 0;
      obj = void 0;
      _results = [];
      for (i in this._layers) {
        obj = this._layers[i];
        _results.push(this._addItem(obj));
      }
      return _results;
    },
    _onLayerChange: function(e) {
      var id;

      id = L.stamp(e.layer);
      if (this._layers[id] && !this._handlingClick) {
        return this._update();
      }
    },
    _addItem: function(obj) {
      var checked, container, control, controlgroup, input, label, toggle, _this;

      _this = this;
      container = this._baseLayersList;
      controlgroup = L.DomUtil.create("div", "control-group", container);
      checked = this._map.hasLayer(obj.layer);
      label = L.DomUtil.create("label", "control-label pull-left", controlgroup);
      label.innerHTML = " " + obj.name;
      control = L.DomUtil.create("div", "control pull-right", controlgroup);
      toggle = L.DomUtil.create("div", "switch switch-small", control);
      input = L.DomUtil.create("input", "leaflet-control-layers-selector", toggle);
      input.type = "checkbox";
      input.defaultChecked = checked;
      input.layerId = L.stamp(obj.layer);
      $(toggle).on("switch-change", function(e, data) {
        return _this._onInputClick(input, obj);
      });
      return controlgroup;
    },
    _onInputClick: function(input, obj) {
      this._handlingClick = true;
      if (input.checked) {
        this._map.addLayer(obj.layer);
        this._map.fire("layeradd", {
          layer: obj
        });
      } else {
        this._map.removeLayer(obj.layer);
        this._map.fire("layerremove", {
          layer: obj
        });
      }
      return this._handlingClick = false;
    },
    _expand: function() {
      return L.DomUtil.addClass(this._container, "leaflet-control-layers-expanded");
    },
    _collapse: function() {
      return this._container.className = this._container.className.replace(" leaflet-control-layers-expanded", "");
    }
  });

}).call(this);
