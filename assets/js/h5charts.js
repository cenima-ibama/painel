// Generated by CoffeeScript 1.7.1
(function() {
  var chart1, chart10, chart11, chart12, chart2, chart3, chart4, chart5, chart6, chart7, chart8, chart9, chartAnnualEmbargo, chartDailyEmbargo, chartMonthlyEmbargo, chartStatesEmbargo, chartsDeter, chartsEmbargo, i, knob1, knob2, knob3, lastSelectedRegion, properties, region, reloadChartsDeter, reloadChartsEmbargos, rest, selectMonths, selectType, selectYears, selectedYear, spark1, spark2, sparkAnnualEmbargo, sparkMonthlyEmbargo, sparkTVAAEmbargo, sparkTVMAEmbargo, sparkTVPAEmbargo, sparksDeter, sparksEmbargo, state, years, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;

  H5.Data.restURL = "http://" + document.domain + "/painel/rest";

  H5.Data.domanin = "http://" + document.domain + "/painel";

  H5.Data.changed = false;

  H5.DB.dado_prodes_consolidado = {};

  H5.DB.dado_prodes_consolidado.table = "dado_prodes_consolidado";

  H5.Data.state2 = "AC";

  H5.Data.statesProdes = ["AC", "AP", "AM", "PA", "RO", "RR", "TO", "MT", "MA"];

  H5.Data.state = "brasil";

  H5.Data.states = ["AC", "AM", "AP", "MA", "MT", "PA", "RO", "RR", "TO"];

  H5.Data.allstates = ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"];

  H5.Data.regions = {
    names: ["norte", "sul", "nordeste", "sudeste", "centrooeste"],
    amazonia: ["AC", "AP", "AM", "PA", "RO", "RR", "TO", "MT", "MA", "brasil"],
    norte: ["AC", "AP", "AM", "PA", "RO", "RR", "TO"],
    sul: ["PR", "RS", "SC"],
    nordeste: ["AL", "BA", "CE", "MA", "PB", "PE", "PI", "RN", "SE"],
    sudeste: ["ES", "MG", "RJ", "SP"],
    centrooeste: ["DF", "GO", "MT", "MS"]
  };

  H5.Data.thisDate = new Date();

  H5.Data.thisYear = H5.Data.thisDate.getFullYear();

  H5.Data.thisProdesYear = H5.Data.thisMonth < 7 ? H5.Data.thisYear : H5.Data.thisYear + 1;

  H5.Data.thisMonth = H5.Data.thisDate.getMonth();

  H5.Data.thisDay = H5.Data.thisDate.getDate();

  H5.Data.rateSlct = 0;

  H5.Data.shapeSlct = 0;

  H5.Data.totalPeriods = H5.Data.thisMonth < 7 ? H5.Data.thisDate.getFullYear() - 2005 : H5.Data.thisDate.getFullYear() - 2004;

  H5.Data.periods = new Array(H5.Data.totalPeriods);

  for (i = _i = 0, _ref = H5.Data.totalPeriods; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    if (H5.Data.thisMonth < 7) {
      H5.Data.periods[i] = (H5.Data.thisDate.getFullYear() - i - 1) + "-" + (H5.Data.thisDate.getFullYear() - i);
    } else {
      H5.Data.periods[i] = (H5.Data.thisDate.getFullYear() - i) + "-" + (H5.Data.thisDate.getFullYear() - i + 1);
    }
  }

  H5.Data.months = {
    0: "Ago",
    1: "Set",
    2: "Out",
    3: "Nov",
    4: "Dez",
    5: "Jan",
    6: "Fev",
    7: "Mar",
    8: "Abr",
    9: "Mai",
    10: "Jun",
    11: "Jul"
  };

  if (!H5.isMobile.any()) {
    H5.Data.animate = {
      duration: 500,
      easing: "inAndOut"
    };
  } else {
    H5.Data.animate = {};
  }

  H5.DB.embargo.data = {
    init: function() {
      var state, _j, _len, _ref1, _results;
      this.states = {};
      _ref1 = H5.Data.allstates;
      _results = [];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        state = _ref1[_j];
        _results.push(this.states[state] = {});
      }
      return _results;
    },
    populate: function(state, date, value) {
      var convertDate, self;
      if (state && date) {
        convertDate = function(dateStr) {
          var dArr;
          dateStr = String(dateStr);
          dArr = dateStr.split("-");
          return new Date(dArr[0], dArr[1] - 1, dArr[2]);
        };
        self = this.states[state];
        self[date] = {};
        self[date].area = value ? value : 0;
        self[date].date = convertDate(date);
        self[date].year = convertDate(date).getFullYear();
        self[date].month = convertDate(date).getMonth();
        self[date].day = convertDate(date).getDate();
        if (this.lastValue) {
          if (this.lastValue.date < self[date].date) {
            this.lastValue = self[date];
          }
        } else {
          this.lastValue = self[date];
        }
      }
    }
  };

  rest = new H5.Rest({
    url: H5.Data.restURL,
    table: H5.DB.embargo.table,
    fields: "uf, data_cadastro, qtd_area_desmatada"
  });

  H5.DB.embargo.data.init();

  _ref1 = rest.data;
  for (i in _ref1) {
    properties = _ref1[i];
    H5.DB.embargo.data.populate(properties.uf, properties.data_cadastro, parseFloat(properties.qtd_area_desmatada));
  }

  H5.DB.diary.data = {
    init: function() {
      var state, _j, _len, _ref2, _results;
      this.states = {};
      _ref2 = H5.Data.states;
      _results = [];
      for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
        state = _ref2[_j];
        _results.push(this.states[state] = {});
      }
      return _results;
    },
    populate: function(state, date, value) {
      var convertDate, self;
      convertDate = function(dateStr) {
        var dArr;
        dateStr = String(dateStr);
        dArr = dateStr.split("-");
        return new Date(dArr[0], dArr[1] - 1, dArr[2]);
      };
      self = this.states[state];
      self[date] = {};
      self[date].area = value;
      self[date].date = convertDate(date);
      self[date].year = convertDate(date).getFullYear();
      self[date].month = convertDate(date).getMonth();
      self[date].day = convertDate(date).getDate();
      if (this.lastValue) {
        if (this.lastValue.date < self[date].date) {
          this.lastValue = self[date];
        }
      } else {
        this.lastValue = self[date];
      }
    }
  };

  rest = new H5.Rest({
    url: H5.Data.restURL,
    table: H5.DB.diary.table,
    fields: "estado, data, total"
  });

  H5.DB.diary.data.init();

  _ref2 = rest.data;
  for (i in _ref2) {
    properties = _ref2[i];
    H5.DB.diary.data.populate(properties.estado, properties.data, parseFloat(properties.total));
  }

  H5.DB.prodes.data = {
    init: function() {
      var period, state, _j, _len, _ref3, _results;
      this.states = {};
      _ref3 = H5.Data.states;
      _results = [];
      for (_j = 0, _len = _ref3.length; _j < _len; _j++) {
        state = _ref3[_j];
        this.states[state] = {};
        _results.push((function() {
          var _k, _len1, _ref4, _results1;
          _ref4 = H5.Data.periods;
          _results1 = [];
          for (_k = 0, _len1 = _ref4.length; _k < _len1; _k++) {
            period = _ref4[_k];
            _results1.push(this.states[state][period] = {});
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    populate: function(period, ac, am, ap, ma, mt, pa, ro, rr, to) {
      var self;
      self = this.states;
      self.AC[period].area = ac;
      self.AM[period].area = am;
      self.AP[period].area = ap;
      self.MA[period].area = ma;
      self.MT[period].area = mt;
      self.PA[period].area = pa;
      self.RO[period].area = ro;
      self.RR[period].area = rr;
      return self.TO[period].area = to;
    }
  };

  rest = new H5.Rest({
    url: H5.Data.restURL,
    table: H5.DB.prodes.table
  });

  H5.DB.prodes.data.init();

  _ref3 = rest.data;
  for (i in _ref3) {
    properties = _ref3[i];
    H5.DB.prodes.data.populate(properties.ano_prodes.replace('/', '-'), parseFloat(properties.ac), parseFloat(properties.am), parseFloat(properties.ap), parseFloat(properties.ma), parseFloat(properties.mt), parseFloat(properties.pa), parseFloat(properties.ro), parseFloat(properties.rr), parseFloat(properties.to));
  }

  H5.DB.cloud.data = {
    init: function() {
      return this.nuvem = {};
    },
    populate: function(date, value) {
      var convertDate, self;
      convertDate = function(dateStr) {
        var dArr;
        dateStr = String(dateStr);
        dArr = dateStr.split("-");
        return new Date(dArr[0], dArr[1] - 1, dArr[2]);
      };
      self = this.nuvem;
      self[date] = {};
      self[date].value = value;
      self[date].date = convertDate(date);
      self[date].year = convertDate(date).getFullYear();
      self[date].month = convertDate(date).getMonth();
      return self[date].day = convertDate(date).getDate();
    }
  };

  rest = new H5.Rest({
    url: H5.Data.restURL,
    table: H5.DB.cloud.table
  });

  H5.DB.cloud.data.init();

  _ref4 = rest.data;
  for (i in _ref4) {
    properties = _ref4[i];
    H5.DB.cloud.data.populate(properties.data, properties.percent);
  }

  H5.DB.dado_prodes_consolidado.data = {
    init: function() {
      var state, _j, _len, _ref5;
      this.states = {};
      _ref5 = H5.Data.allstates;
      for (_j = 0, _len = _ref5.length; _j < _len; _j++) {
        state = _ref5[_j];
        this.states[state] = {};
      }
      return this.states['brasil'] = {};
    },
    populate: function(year, state, terra_indigena, uc_sustentavel, uc_integral, assentamento, floresta) {
      var self;
      if (state && year) {
        self = this.states[state];
        self[year] = {};
        self[year].terra_indigena = terra_indigena ? terra_indigena : 0;
        self[year].uc_sustentavel = uc_sustentavel;
        self[year].uc_integral = uc_integral;
        self[year].assentamento = assentamento;
        self[year].floresta = floresta;
        self[year].year = year;
        if (this.lastValue) {
          if (this.lastValue.year < self[year].year) {
            this.lastValue = self[year];
          }
        } else {
          this.lastValue = self[year];
        }
        self = this.states['brasil'];
        if (!self[year]) {
          self[year] = {};
          self[year].terra_indigena = 0;
          self[year].uc_sustentavel = 0;
          self[year].uc_integral = 0;
          self[year].assentamento = 0;
          self[year].floresta = 0;
          self[year].year = year;
        }
        self[year].terra_indigena += terra_indigena ? terra_indigena : 0;
        self[year].uc_sustentavel += uc_sustentavel;
        self[year].uc_integral += uc_integral;
        self[year].assentamento += assentamento;
        self[year].floresta += floresta;
      }
    }
  };

  rest = new H5.Rest({
    url: H5.Data.restURL,
    table: H5.DB.dado_prodes_consolidado.table
  });

  H5.DB.dado_prodes_consolidado.data.init();

  _ref5 = rest.data;
  for (i in _ref5) {
    properties = _ref5[i];
    H5.DB.dado_prodes_consolidado.data.populate(properties.ano, properties.uf, parseFloat(properties.terra_indigena), parseFloat(properties.unidades_de_conservacao_uso_sustentavel), parseFloat(properties.unidades_de_conservacao_protecao_integral), parseFloat(properties.assentamento), parseFloat(properties.floresta_publica));
  }

  H5.Data.thisDate = H5.DB.diary.data.lastValue.date;

  H5.Data.thisDay = H5.DB.diary.data.lastValue.day;

  H5.Data.thisMonth = H5.DB.diary.data.lastValue.month;

  H5.Data.thisYear = H5.DB.diary.data.lastValue.year;

  H5.Data.thisProdesYear = H5.Data.thisMonth < 7 ? H5.Data.thisYear : H5.Data.thisYear + 1;

  H5.Data.selectedYear = H5.Data.thisYear;

  H5.Data.selectedMonth = H5.Data.thisMonth;

  H5.Data.totalPeriods = H5.Data.thisMonth < 7 ? H5.Data.thisDate.getFullYear() - 2005 : H5.Data.thisDate.getFullYear() - 2004;

  H5.Data.periods = new Array(H5.Data.totalPeriods);

  for (i = _j = 0, _ref6 = H5.Data.totalPeriods; 0 <= _ref6 ? _j <= _ref6 : _j >= _ref6; i = 0 <= _ref6 ? ++_j : --_j) {
    if (H5.Data.thisMonth < 7) {
      H5.Data.periods[i] = (H5.Data.thisDate.getFullYear() - i - 1) + "-" + (H5.Data.thisDate.getFullYear() - i);
    } else {
      H5.Data.periods[i] = (H5.Data.thisDate.getFullYear() - i) + "-" + (H5.Data.thisDate.getFullYear() - i + 1);
    }
  }

  chart1 = new H5.Charts.GoogleCharts({
    type: "Line",
    container: "chart1",
    title: "Alerta DETER: Índice Diário",
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart1.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, months, options, secondPeriod, state, _k;
    createTable = (function(_this) {
      return function(state) {
        var day, key, reg, sum, _fn, _k, _ref7, _results;
        sum = 0;
        _results = [];
        for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
          _ref7 = H5.DB.diary.data.states[state];
          _fn = function(reg) {
            var _ref8;
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.day === day) {
              sum += reg.area;
              return false;
            }
          };
          for (key in _ref7) {
            reg = _ref7[key];
            _fn(reg);
          }
          _results.push(_this.data.setValue(day - 1, 1, Math.round((_this.data.getValue(day - 1, 1) + sum) * 100) / 100));
        }
        return _results;
      };
    })(this);
    this.createDataTable();
    this.data.addColumn("number", "Dia");
    this.data.addColumn("number", "Área");
    daysInMonth = new Date(H5.Data.selectedYear, H5.Data.selectedMonth + 1, 0).getDate();
    firstPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, 1);
    secondPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, daysInMonth);
    data = [];
    for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
      data[0] = day;
      data[1] = 0;
      this.data.addRow(data);
    }
    if (H5.Data.state === "brasil") {
      for (state in H5.DB.diary.data.states) {
        createTable(state);
      }
    } else {
      createTable(H5.Data.state);
    }
    months = {
      0: "Janeiro",
      1: "Fevereiro",
      2: "Março",
      3: "Abril",
      4: "Maio",
      5: "Junho",
      6: "Julho",
      7: "Agosto",
      8: "Setembro",
      9: "Outubro",
      10: "Novembro",
      11: "Dezembro"
    };
    this.changeTitle("Alerta DETER: Índice Diário [" + months[H5.Data.selectedMonth] + "]");
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      legend: "none",
      chartArea: {
        width: "70%",
        height: "70%"
      },
      colors: ['#3ABCFC'],
      vAxis: {
        title: "Área km²"
      },
      hAxis: {
        title: "Dias",
        gridlines: {
          color: "#CCC",
          count: daysInMonth / 5
        }
      },
      animation: H5.Data.animate
    };
    return this.chart.draw(this.data, options);
  };

  chart2 = new H5.Charts.GoogleCharts({
    type: "Area",
    container: "chart2",
    period: 2,
    title: "Alerta DETER: Índice Mensal",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart2._addBtn.onclick = function() {
    chart2.options.period++;
    return chart2.drawChart();
  };

  chart2._delBtn.onclick = function() {
    chart2.options.period--;
    return chart2.drawChart();
  };

  chart2.drawChart = function() {
    var data, month, options, sumValues, _k, _l, _ref7, _ref8, _ref9;
    sumValues = function(year, month) {
      var firstPeriod, key, name, reg, secondPeriod, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.diary.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.month === month) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.diary.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod) && reg.month === month) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Mês");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      this.data.addColumn("number", H5.Data.periods[i]);
    }
    for (month in H5.Data.months) {
      data = [H5.Data.months[month]];
      month = parseInt(month);
      if ((7 <= (_ref8 = month + 7) && _ref8 <= 11)) {
        month += 7;
      } else {
        month -= 5;
      }
      for (i = _l = 1, _ref9 = this.options.period; 1 <= _ref9 ? _l <= _ref9 : _l >= _ref9; i = 1 <= _ref9 ? ++_l : --_l) {
        data[i] = sumValues(H5.Data.thisProdesYear - i + 1, month);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chart3 = new H5.Charts.GoogleCharts({
    type: "Bar",
    container: "chart3",
    period: 1,
    title: "Alerta DETER: Índice Períodos",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart3._addBtn.onclick = function() {
    chart3.options.period++;
    return chart3.drawChart();
  };

  chart3._delBtn.onclick = function() {
    chart3.options.period--;
    return chart3.drawChart();
  };

  chart3.drawChart = function() {
    var data, options, sumAvg, sumAvgValues, sumTotal, sumTotalValues, sumValues, _k, _ref7;
    sumValues = function(firstPeriod, secondPeriod) {
      var key, name, reg, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.diary.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.diary.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod)) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    sumTotalValues = function(year) {
      var firstPeriod, secondPeriod;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      return sumValues(firstPeriod, secondPeriod);
    };
    sumAvgValues = function(year) {
      var firstPeriod, month, secondPeriod;
      month = H5.Data.selectedMonth;
      firstPeriod = new Date(year - 1, 7, 1);
      if (month > 6) {
        if (month === H5.Data.thisMonth) {
          secondPeriod = new Date(year - 1, month, H5.Data.thisDay);
        } else {
          secondPeriod = new Date(year - 1, month + 1, 0);
        }
      } else {
        if (month === H5.Data.thisMonth) {
          secondPeriod = new Date(year, month, H5.Data.thisDay);
        } else {
          secondPeriod = new Date(year, month + 1, 0);
        }
      }
      return sumValues(firstPeriod, secondPeriod);
    };
    this.createDataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Parcial");
    this.data.addColumn("number", "Diferença");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k <= _ref7 : _k >= _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      data = [H5.Data.periods[i]];
      sumTotal = sumTotalValues(H5.Data.thisProdesYear - i);
      sumAvg = sumAvgValues(H5.Data.thisProdesYear - i);
      data[1] = sumAvg;
      data[2] = Math.round((sumTotal - sumAvg) * 100) / 100;
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "68%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121'],
      vAxis: {
        title: "Período PRODES"
      },
      hAxis: {
        title: "Área km²"
      },
      bar: {
        groupWidth: "80%"
      },
      isStacked: true,
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods - 1;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chart4 = new H5.Charts.GoogleCharts({
    type: "Column",
    container: "chart4",
    period: 2,
    title: "Alerta DETER: UFs",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart4._addBtn.onclick = function() {
    chart4.options.period++;
    return chart4.drawChart();
  };

  chart4._delBtn.onclick = function() {
    chart4.options.period--;
    return chart4.drawChart();
  };

  chart4.drawChart = function() {
    var data, j, name, options, state, sumValues, _k, _l, _m, _ref10, _ref7, _ref8, _ref9;
    sumValues = function(state, year) {
      var firstPeriod, key, reg, secondPeriod, sum, _ref7, _ref8;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      _ref7 = H5.DB.diary.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
          sum += reg.area;
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Estado");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      this.data.addColumn("number", H5.Data.periods[i]);
    }
    if (H5.Data.state === "brasil") {
      _ref8 = H5.DB.diary.data.states;
      for (name in _ref8) {
        state = _ref8[name];
        data = [name];
        for (j = _l = 1, _ref9 = this.options.period; 1 <= _ref9 ? _l <= _ref9 : _l >= _ref9; j = 1 <= _ref9 ? ++_l : --_l) {
          data[j] = sumValues(name, H5.Data.thisProdesYear - j + 1);
        }
        this.data.addRow(data);
      }
    } else {
      data = [H5.Data.state];
      for (j = _m = 1, _ref10 = this.options.period; 1 <= _ref10 ? _m <= _ref10 : _m >= _ref10; j = 1 <= _ref10 ? ++_m : --_m) {
        data[j] = sumValues(H5.Data.state, H5.Data.thisProdesYear - j + 1);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chart5 = new H5.Charts.GoogleCharts({
    type: "Area",
    container: "chart5",
    title: "Taxa PRODES|Alerta DETER: Acumulado Períodos",
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart5.drawChart = function() {
    var data, options, sumDeter, sumProdes;
    sumDeter = function(year) {
      var firstPeriod, key, name, reg, secondPeriod, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.diary.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.diary.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod)) {
            sum += reg.area;
          }
        }
      }
      if (sum >= 0) {
        return Math.round(sum * 100) / 100;
      }
    };
    sumProdes = function(period) {
      var name, state, sum, _ref7;
      sum = 0;
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.prodes.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          sum += state[period].area;
        }
      } else {
        sum = H5.DB.prodes.data.states[H5.Data.state][period].area;
      }
      if (sum >= 0) {
        return sum;
      }
    };
    this.createDataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Alerta DETER");
    this.data.addColumn("number", "Taxa PRODES");
    i = H5.Data.totalPeriods;
    while (i >= 0) {
      data = [H5.Data.periods[i]];
      data[1] = sumDeter(H5.Data.thisProdesYear - i);
      data[2] = sumProdes(H5.Data.periods[i]);
      this.data.addRow(data);
      i--;
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#D0FC3F'],
      vAxis: {
        title: "Área km²"
      },
      hAxis: {
        title: "Período PRODES"
      },
      animation: H5.Data.animate
    };
    return this.chart.draw(this.data, options);
  };

  chart6 = new H5.Charts.GoogleCharts({
    type: "Column",
    container: "chart6",
    period: 1,
    title: "Taxa PRODES|Alerta DETER: UFs",
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true,
      arrows: true
    }
  });

  chart6.changeTitle(H5.Data.periods[chart6.options.period]);

  chart6._leftBtn.onclick = function() {
    chart6.options.period++;
    return chart6.drawChart();
  };

  chart6._rightBtn.onclick = function() {
    chart6.options.period--;
    return chart6.drawChart();
  };

  chart6.drawChart = function() {
    var data, name, options, state, sumDeter, sumProdes, _ref7;
    sumDeter = function(state, year) {
      var firstPeriod, key, reg, secondPeriod, sum, _ref7, _ref8;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      _ref7 = H5.DB.diary.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
          sum += reg.area;
        }
      }
      return Math.round(sum * 100) / 100;
    };
    sumProdes = function(state, year) {
      var key, period, reg, sum, _ref7;
      sum = 0;
      period = (year - 1) + "-" + year;
      _ref7 = H5.DB.prodes.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if (key === period) {
          if (reg.area != null) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Estado");
    this.data.addColumn("number", "Alerta DETER");
    this.data.addColumn("number", "Taxa PRODES");
    if (H5.Data.state === "brasil") {
      _ref7 = H5.DB.diary.data.states;
      for (name in _ref7) {
        state = _ref7[name];
        data = [name];
        data[1] = sumDeter(name, H5.Data.thisProdesYear - this.options.period);
        data[2] = sumProdes(name, H5.Data.thisProdesYear - this.options.period);
        this.data.addRow(data);
      }
    } else {
      data = [H5.Data.state];
      data[1] = sumDeter(H5.Data.state, H5.Data.thisProdesYear - this.options.period);
      data[2] = sumProdes(H5.Data.state, H5.Data.thisProdesYear - this.options.period);
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#D0FC3F'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this.changeTitle("Taxa PRODES|Alerta DETER: UFs [" + H5.Data.periods[this.options.period] + "]");
    this._rightBtn.disabled = true;
    this._leftBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._rightBtn.disabled = _this.options.period < 2;
        return _this._leftBtn.disabled = _this.options.period >= H5.Data.totalPeriods;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chart7 = new H5.Charts.GoogleCharts({
    type: "Pie",
    container: "chart7",
    period: 0,
    buttons: {
      arrows: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart7.changeTitle(H5.Data.periods[chart7.options.period]);

  chart7._leftBtn.onclick = function() {
    chart7.options.period++;
    return chart7.drawChart();
  };

  chart7._rightBtn.onclick = function() {
    chart7.options.period--;
    return chart7.drawChart();
  };

  chart7.drawChart = function() {
    var data, estado, options, sumValues, _k, _ref7;
    sumValues = function(state, year) {
      var firstPeriod, key, reg, secondPeriod, sum, _ref7, _ref8;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      _ref7 = H5.DB.diary.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
          sum += reg.area;
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Mês");
    this.data.addColumn("number", H5.Data.periods[this.options.period]);
    for (i = _k = 0, _ref7 = H5.Data.states.length; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      estado = H5.Data.states[i];
      data = [estado];
      data[1] = sumValues(H5.Data.states[i], H5.Data.thisProdesYear - this.options.period);
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      chartArea: {
        width: "90%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      backgroundColor: "transparent"
    };
    this.changeTitle(H5.Data.periods[this.options.period]);
    this._rightBtn.disabled = true;
    this._leftBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._rightBtn.disabled = _this.options.period < 1;
        return _this._leftBtn.disabled = _this.options.period >= H5.Data.totalPeriods;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chart8 = new H5.Charts.GoogleCharts({
    type: "Pie",
    container: "chart8",
    period: 1,
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart8.drawChart = function() {
    var data, daysInMonth, estado, firstPeriod, options, pieText, pieTooltip, secondPeriod, sumValues, _k, _ref7;
    sumValues = function(state) {
      var key, reg, sum, _ref7, _ref8;
      sum = 0;
      _ref7 = H5.DB.diary.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
          sum += reg.area;
        }
      }
      if (firstPeriod > H5.Data.thisDate) {
        return 1;
      } else {
        return Math.round(sum * 100) / 100;
      }
    };
    this.createDataTable();
    this.data.addColumn("string", "Estado");
    this.data.addColumn("number", "Área Total");
    daysInMonth = new Date(H5.Data.selectedYear, H5.Data.selectedMonth + 1, 0).getDate();
    firstPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, 1);
    secondPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, daysInMonth);
    if (firstPeriod > H5.Data.thisDate) {
      pieText = "none";
      pieTooltip = "none";
    } else {
      pieText = "percent";
      pieTooltip = "focus";
    }
    for (i = _k = 0, _ref7 = H5.Data.states.length; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      estado = H5.Data.states[i];
      data = [estado];
      data[1] = sumValues(H5.Data.states[i]);
      this.data.addRow(data);
    }
    this.changeTitle(selectMonths.options[H5.Data.selectedMonth].label + ", " + H5.Data.selectedYear);
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      pieSliceText: pieText,
      tooltip: {
        trigger: pieTooltip
      },
      chartArea: {
        width: "90%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    return this.chart.draw(this.data, options);
  };

  chart9 = new H5.Charts.GoogleCharts({
    type: "Line",
    container: "chart9",
    period: 2,
    title: "Alerta DETER: Taxa(%) de Nuvens",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart9._addBtn.onclick = function() {
    chart9.options.period++;
    return chart9.drawChart();
  };

  chart9._delBtn.onclick = function() {
    chart9.options.period--;
    return chart9.drawChart();
  };

  chart9.drawChart = function() {
    var data, month, options, sumValues, _k, _l, _ref7, _ref8, _ref9;
    sumValues = function(year, month) {
      var firstPeriod, key, maxDate, percent, reg, secondPeriod, _fn, _ref7;
      percent = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      maxDate = firstPeriod;
      _ref7 = H5.DB.cloud.data.nuvem;
      _fn = function(reg) {
        if (reg.date >= firstPeriod && reg.date <= secondPeriod && reg.month === month) {
          if (reg.date >= maxDate) {
            maxDate = reg.date;
            percent = reg.value;
            return false;
          }
        }
      };
      for (key in _ref7) {
        reg = _ref7[key];
        _fn(reg);
      }
      return Math.round(percent * 100);
    };
    this.createDataTable();
    this.data.addColumn("string", "Mês");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      this.data.addColumn("number", H5.Data.periods[i]);
    }
    for (month in H5.Data.months) {
      data = [H5.Data.months[month]];
      month = parseInt(month);
      if ((7 <= (_ref8 = month + 7) && _ref8 <= 11)) {
        month += 7;
      } else {
        month -= 5;
      }
      for (i = _l = 1, _ref9 = this.options.period; 1 <= _ref9 ? _l <= _ref9 : _l >= _ref9; i = 1 <= _ref9 ? ++_l : --_l) {
        data[i] = sumValues(H5.Data.thisProdesYear - i + 1, month);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Porcentagem"
      },
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods - 4;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  lastSelectedRegion = "";

  $("#quick2 a").on("click", function(e) {
    e.preventDefault();
    if (H5.Data.state2 === this.id) {
      return;
    }
    H5.Data.state2 = this.id;
    $(this).each(function() {
      return $("a").removeClass("active");
    });
    return $(this).addClass("active");
  });

  chart10 = new H5.Charts.GoogleCharts({
    type: "Line",
    container: "chart10",
    title: "Taxa de desmatamento PRODES em Terras Indígenas",
    loadingImage: '<img src="' + H5.Data.domanin + '/assets/img/spinner.gif" id="loading_spinner" style="display: inline; padding-top:90px;" title="">',
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart10._consultBtn = document.getElementById('consultBtn');

  chart10._shapesSlct = document.getElementById('shapesSlct');

  chart10._shapesSlct.options[0].selected = true;

  chart10._ratesSlct = document.getElementById('ratesSlct');

  chart10._shapesSlct.options[0].selected = true;

  chart10._dateBegin = document.getElementById('dateBegin');

  chart10._dateEnd = document.getElementById('dateFinish');

  chart10._stateGroup = document.getElementById('quick2').children;

  chart10._state = 'Brasil';

  $(chart10._consultBtn).on("click", function(event) {
    return chart10.drawChart();
  });

  $.each(chart10._stateGroup, function() {
    return $(this).on("click", function(event) {
      var _ref7;
      return chart10._state = (_ref7 = $(this).children('span').html()) != null ? _ref7 : 'Brasil';
    });
  });

  chart10.drawChart = function() {
    var areaSelected, createTable, data, dateBegin, dateEnd, deter_area, deter_area_state, deter_field, deter_table, function_name, months, options, partialBegin, partialEnd, rateSelected, rates, shapes, state, stateData, timeBegin, timeBetween, timeEnd, year, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _o, _p, _ref10, _ref11, _ref12, _ref7, _ref8, _ref9;
    createTable = (function(_this) {
      return function(state) {
        var day, sum, _k, _results;
        sum = 0;
        _results = [];
        for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
          $.each(H5.DB.diary.data.states[state], function(key, reg) {
            var _ref7;
            if ((firstPeriod <= (_ref7 = reg.date) && _ref7 <= secondPeriod) && reg.day === day) {
              sum += reg.area;
              return false;
            }
          });
          _results.push(_this.data.setValue(day - 1, 1, Math.round((_this.data.getValue(day - 1, 1) + sum) * 100) / 100));
        }
        return _results;
      };
    })(this);
    this.createDataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Área em km²");
    data = [];
    areaSelected = chart10._shapesSlct.value;
    rateSelected = chart10._ratesSlct.value;
    dateBegin = chart10._dateBegin.value;
    dateEnd = chart10._dateEnd.value;
    if (chart10._state !== 'Brasil') {
      state = "'" + chart10._state + "',";
    } else {
      state = '';
    }
    shapes = {
      "terra_indigena": "Terras Indígenas",
      "uc_sustentavel": "Unidade de Conservação de uso sustentável",
      "uc_integral": "Unidade de Conservação de proteção integral",
      "assentamento": "Assentamento",
      "floresta": "Floresta Pública"
    };
    rates = {
      "0": "DETER",
      "1": "PRODES"
    };
    if (rateSelected === '1') {
      stateData = H5.DB.dado_prodes_consolidado.data.states[H5.Data.state2];
      switch (areaSelected) {
        case "terra_indigena":
          _ref7 = ["2010", "2011", "2012", "2013"];
          for (_k = 0, _len = _ref7.length; _k < _len; _k++) {
            year = _ref7[_k];
            data[0] = year;
            data[1] = stateData[year].terra_indigena;
            this.data.addRow(data);
          }
          break;
        case "assentamento":
          _ref8 = ["2010", "2011", "2012", "2013"];
          for (_l = 0, _len1 = _ref8.length; _l < _len1; _l++) {
            year = _ref8[_l];
            data[0] = year;
            data[1] = stateData[year].assentamento;
            this.data.addRow(data);
          }
          break;
        case "floresta":
          _ref9 = ["2010", "2011", "2012", "2013"];
          for (_m = 0, _len2 = _ref9.length; _m < _len2; _m++) {
            year = _ref9[_m];
            data[0] = year;
            data[1] = stateData[year].floresta;
            this.data.addRow(data);
          }
          break;
        case "uc_integral":
          _ref10 = ["2010", "2011", "2012", "2013"];
          for (_n = 0, _len3 = _ref10.length; _n < _len3; _n++) {
            year = _ref10[_n];
            data[0] = year;
            data[1] = stateData[year].uc_integral;
            this.data.addRow(data);
          }
          break;
        case "uc_sustentavel":
          _ref11 = ["2010", "2011", "2012", "2013"];
          for (_o = 0, _len4 = _ref11.length; _o < _len4; _o++) {
            year = _ref11[_o];
            data[0] = year;
            data[1] = stateData[year].uc_sustentavel;
            this.data.addRow(data);
          }
          break;
        case "dominio_publico":
          _ref12 = ["2010", "2011", "2012", "2013"];
          for (_p = 0, _len5 = _ref12.length; _p < _len5; _p++) {
            year = _ref12[_p];
            data[0] = year;
            data[1] = stateData[year].uc_sustentavel;
            this.data.addRow(data);
          }
          break;
      }
    } else {
      if (!$("#loading").is(':visible')) {
        this._loadScreen();
      }
      deter_area;
      switch (areaSelected) {
        case 'terra_indigena':
          deter_area = "'" + 'terra_indigena';
          break;
        case 'assentamento':
          deter_area = "'" + 'assentamento';
          break;
        case 'floresta':
          deter_area = "'" + 'floresta_publica';
          break;
        case 'uc_integral':
          deter_area = "'" + 'unidade_conservacao';
          break;
        case 'uc_sustentavel':
          deter_area = "'" + 'unidade_conservacao';
          break;
        default:
          deter_area = '';
      }
      deter_area_state = deter_area !== '' ? deter_area + "'," + state + "'" : state + "'";
      timeBegin = $.datepicker.parseDate('dd/mm/yy', dateBegin);
      timeEnd = $.datepicker.parseDate('dd/mm/yy', dateEnd);
      timeBetween = (timeEnd - timeBegin) / 1000 / 60 / 60 / 24;
      partialBegin = new Date(timeBegin);
      partialEnd = new Date(timeBegin);
      if (state !== "") {
        if (areaSelected === 'uc_integral') {
          function_name = 'dados_deter_pi';
        } else if (areaSelected === 'uc_sustentavel') {
          function_name = 'dados_deter_us';
        } else if (areaSelected === 'dominio_publico') {
          function_name = 'dados_deter_total_outros';
        } else {
          function_name = 'dados_deter';
        }
      } else {
        if (areaSelected === 'dominio_publico') {
          function_name = 'dados_deter_total_outros_brasil';
        } else {
          function_name = 'dados_deter_brasil';
        }
      }
      deter_field = '';
      deter_table = function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "') AS (resultado float)";
      months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
      if (timeBetween < 50) {
        console.log('time to print by days');
        while (partialEnd.setDate(partialEnd.getDate() + 1) < timeEnd) {
          deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + partialBegin.getDate() + "/" + months[partialBegin.getMonth()] + "\",";
          partialBegin = new Date(partialEnd);
        }
        partialEnd = timeEnd;
        deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + partialBegin.getDate() + "/" + months[partialBegin.getMonth()] + "\"";
      } else if (timeBetween < 730) {
        console.log('time to print by months');
        partialEnd.setDate(1);
        while (partialEnd.setMonth(partialEnd.getMonth() + 1) < timeEnd) {
          deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + months[partialBegin.getMonth()] + "/" + partialBegin.getFullYear() + "\",";
          partialBegin = new Date(partialEnd);
        }
        partialEnd = timeEnd;
        deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + months[partialBegin.getMonth()] + "/" + partialBegin.getFullYear() + "\"";
      } else {
        console.log('time to print by years');
        partialEnd.setDate(1);
        partialEnd.setMonth(0);
        while (partialEnd.setFullYear(partialEnd.getFullYear() + 1) < timeEnd) {
          deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + partialBegin.getFullYear() + "\",";
          partialBegin = new Date(partialEnd);
        }
        partialEnd = timeEnd;
        deter_field += "(select * from " + function_name + "(" + deter_area_state + $.datepicker.formatDate('dd/mm/yy', partialBegin) + "','" + $.datepicker.formatDate('dd/mm/yy', partialEnd) + "') AS (resultado float)) as \"" + partialBegin.getFullYear() + "\"";
      }
      rest = new H5.Rest({
        url: H5.Data.restURL,
        fields: deter_field,
        table: deter_table,
        restService: "ws_selectonlyquery.php"
      });
      $.each(rest.data[0], (function(_this) {
        return function(field, result) {
          data[0] = field.toString();
          data[1] = result ? parseFloat(result) : 0;
          return _this.data.addRow(data);
        };
      })(this));
    }
    this.changeTitle("Taxas de Desmatamento " + rates[rateSelected] + "  em " + shapes[areaSelected] + " - [2010 - 2013]");
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      legend: "none",
      chartArea: {
        width: "70%",
        height: "70%"
      },
      colors: ['#3ABCFC'],
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this._chartScreen();
    return this.chart.draw(this.data, options);
  };

  chart11 = new H5.Charts.GoogleCharts({
    type: "SteppedArea",
    container: "chart11",
    period: 1,
    title: "Taxa de desmatamento PRODES - [2010 - 2013]",
    buttons: {
      minusplus: false,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart11.drawChart = function() {
    var createTable, data, options;
    createTable = (function(_this) {
      return function(states) {
        var data, estado, rate, state, sum, year, _k, _l, _len, _len1, _len2, _m, _ref7, _ref8, _ref9, _results;
        sum = 0;
        data = [];
        i = 1;
        _ref7 = ["2010", "2011", "2012", "2013"];
        _results = [];
        for (_k = 0, _len = _ref7.length; _k < _len; _k++) {
          year = _ref7[_k];
          data[0] = year;
          _ref8 = ["terra_indigena", "assentamento", "floresta", "uc_integral", "uc_sustentavel"];
          for (_l = 0, _len1 = _ref8.length; _l < _len1; _l++) {
            rate = _ref8[_l];
            _ref9 = H5.Data.statesProdes;
            for (_m = 0, _len2 = _ref9.length; _m < _len2; _m++) {
              state = _ref9[_m];
              estado = H5.DB.dado_prodes_consolidado.data.states[state];
              sum += estado[year][rate];
            }
            data[i] = sum;
            i++;
            sum = 0;
          }
          i = 1;
          _results.push(_this.data.addRow(data));
        }
        return _results;
      };
    })(this);
    this.createDataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Terra indígena em km²");
    this.data.addColumn("number", "Assentamento em km²");
    this.data.addColumn("number", "Floresta Pública em km²");
    this.data.addColumn("number", "UC Inegral em km²");
    this.data.addColumn("number", "UC Sustentável em km²");
    data = [];
    createTable("nenhumEstado");
    this.changeTitle("Taxas de Desmatamento PRODES  em áreas específicas - [2010 - 2013]");
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#FF5454', '#C7A258', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Área em km2"
      },
      isStacked: true,
      animation: H5.Data.animate
    };
    return this.chart.draw(this.data, options);
  };

  chart12 = new H5.Charts.GoogleCharts({
    type: "Pie",
    container: "chart12",
    period: 0,
    buttons: {
      arrows: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chart12.changeTitle("Taxas de desmatamento PRODES em 2012");

  chart12._leftBtn.onclick = function() {
    chart12.options.period++;
    return chart12.drawChart();
  };

  chart12._rightBtn.onclick = function() {
    chart12.options.period--;
    return chart12.drawChart();
  };

  years = ["2010", "2011", "2012", "2013"];

  chart12.drawChart = function() {
    var createTable, options;
    createTable = (function(_this) {
      return function(states) {
        var data, estado, rate, state, sum, year, _k, _l, _len, _len1, _ref7, _ref8, _results;
        data = [];
        sum = 0;
        years = ["2010", "2011", "2012", "2013"];
        year = years[chart12.options.period];
        _ref7 = ["terra_indigena", "assentamento", "floresta", "uc_integral", "uc_sustentavel"];
        _results = [];
        for (_k = 0, _len = _ref7.length; _k < _len; _k++) {
          rate = _ref7[_k];
          switch (rate) {
            case "terra_indigena":
              data[0] = "Terras Indígenas";
              break;
            case "assentamento":
              data[0] = "Assentamentos";
              break;
            case "floresta":
              data[0] = "Floresta Pública";
              break;
            case "uc_integral":
              data[0] = "UC Integral";
              break;
            case "uc_sustentavel":
              data[0] = "UC Sustentável";
          }
          _ref8 = H5.Data.statesProdes;
          for (_l = 0, _len1 = _ref8.length; _l < _len1; _l++) {
            state = _ref8[_l];
            estado = H5.DB.dado_prodes_consolidado.data.states[state];
            sum += estado[year][rate];
          }
          data[1] = sum;
          sum = 0;
          _results.push(_this.data.addRow(data));
        }
        return _results;
      };
    })(this);
    this.createDataTable();
    this.data.addColumn("string", "Comparação");
    this.data.addColumn("number", "Área em km²");
    createTable("nenhumEstado");
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      chartArea: {
        width: "90%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#FF5454', '#C7A258', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258']
    };
    this.changeTitle("Taxas de desmatamento PRODES em " + years[this.options.period]);
    this._rightBtn.disabled = true;
    this._leftBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._rightBtn.disabled = _this.options.period < 1;
        return _this._leftBtn.disabled = _this.options.period >= 3;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  spark1 = new H5.Charts.Sparks({
    container: "spark1",
    title: "Total Mensal"
  });

  spark1.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, name, secondPeriod, state, value, _k, _ref7;
    createTable = (function(_this) {
      return function(state) {
        var day, dayValue, key, reg, _fn, _k, _ref7, _results;
        dayValue = 0;
        _results = [];
        for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
          _ref7 = H5.DB.diary.data.states[state];
          _fn = function(reg) {
            var _ref8;
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.day === day) {
              dayValue += reg.area;
              return false;
            }
          };
          for (key in _ref7) {
            reg = _ref7[key];
            _fn(reg);
          }
          _results.push(data[day - 1] = Math.round((data[day - 1] + dayValue) * 100) / 100);
        }
        return _results;
      };
    })(this);
    daysInMonth = new Date(H5.Data.selectedYear, H5.Data.selectedMonth + 1, 0).getDate();
    firstPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, 1);
    secondPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, daysInMonth);
    data = [];
    for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
      data[day - 1] = 0;
    }
    if (H5.Data.state === "brasil") {
      _ref7 = H5.DB.diary.data.states;
      for (name in _ref7) {
        state = _ref7[name];
        createTable(name);
      }
    } else {
      createTable(H5.Data.state);
    }
    value = data[daysInMonth - 1];
    return this.updateInfo(data, value);
  };

  spark2 = new H5.Charts.Sparks({
    container: "spark2",
    title: "Total Período"
  });

  spark2.drawChart = function() {
    var count, data, month, sumValues, value, year, _ref7;
    sumValues = function(year, month) {
      var firstPeriod, key, name, reg, secondPeriod, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      if (month > 6) {
        secondPeriod = new Date(year - 1, month + 1, 0);
      } else if (month !== H5.Data.thisMonth) {
        secondPeriod = new Date(year, month + 1, 0);
      } else {
        secondPeriod = new Date(year, month, H5.Data.thisDay);
      }
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.diary.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.month === month) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.diary.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod) && reg.month === month) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    data = [];
    for (month in H5.Data.months) {
      month = parseInt(month);
      year = H5.Data.selectedMonth < 7 ? H5.Data.selectedYear : H5.Data.selectedYear + 1;
      count = parseInt(H5.Data.selectedMonth);
      if (count >= 7) {
        count -= 7;
      } else {
        count += 5;
      }
      if (month <= count) {
        if ((7 <= (_ref7 = month + 7) && _ref7 <= 11)) {
          month += 7;
        } else {
          month -= 5;
        }
        data.push(sumValues(year, month));
      } else {
        data.push(0);
      }
    }
    value = 0;
    $.each(data, function() {
      return value += this;
    });
    return this.updateInfo(data, Math.round(value * 100) / 100);
  };

  knob1 = new H5.Charts.Knobs({
    container: "knob1",
    title: "Taxa VAA",
    popover: "Taxa de variação em relação ao mesmo mês do ano anterior"
  });

  knob1.drawChart = function() {
    var periodDeforesttionRate, value;
    periodDeforesttionRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref7, _ref8;
        sum = 0;
        if (H5.Data.state === "brasil") {
          for (state in H5.DB.diary.data.states) {
            for (reg in H5.DB.diary.data.states[state]) {
              reg = H5.DB.diary.data.states[state][reg];
              if ((date.getFullYear() <= (_ref7 = reg.year) && _ref7 <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in H5.DB.diary.data.states[H5.Data.state]) {
            reg = H5.DB.diary.data.states[H5.Data.state][reg];
            if ((date.getFullYear() <= (_ref8 = reg.year) && _ref8 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year - 1, month);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  knob2 = new H5.Charts.Knobs({
    container: "knob2",
    title: "Taxa VMA",
    popover: "Taxa de variação em relação ao mês anterior"
  });

  knob2.drawChart = function() {
    var periodDeforesttionRate, value;
    periodDeforesttionRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref7, _ref8;
        sum = 0;
        if (H5.Data.state === "brasil") {
          for (state in H5.DB.diary.data.states) {
            for (reg in H5.DB.diary.data.states[state]) {
              reg = H5.DB.diary.data.states[state][reg];
              if ((date.getFullYear() <= (_ref7 = reg.year) && _ref7 <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in H5.DB.diary.data.states[H5.Data.state]) {
            reg = H5.DB.diary.data.states[H5.Data.state][reg];
            if ((date.getFullYear() <= (_ref8 = reg.year) && _ref8 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year, month - 1);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  knob3 = new H5.Charts.Knobs({
    container: "knob3",
    title: "Taxa VPA",
    popover: "Taxa de variação em relação ao período PRODES anterior"
  });

  knob3.drawChart = function() {
    var periodDeforesttionAvgRate, value;
    periodDeforesttionAvgRate = function(year, month) {
      var curValue, preValue, sumPeriods, sumValues;
      sumValues = function(firstPeriod, secondPeriod) {
        var key, name, reg, state, sum, _ref10, _ref7, _ref8, _ref9;
        sum = 0;
        if (H5.Data.state === "brasil") {
          _ref7 = H5.DB.diary.data.states;
          for (name in _ref7) {
            state = _ref7[name];
            for (key in state) {
              reg = state[key];
              if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
                sum += reg.area;
              }
            }
          }
        } else {
          _ref9 = H5.DB.diary.data.states[H5.Data.state];
          for (key in _ref9) {
            reg = _ref9[key];
            if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod)) {
              sum += reg.area;
            }
          }
        }
        return Math.round(sum * 100) / 100;
      };
      if (month > 6) {
        year++;
      } else {
        year;
      }
      sumPeriods = function(year, month) {
        var firstPeriod, secondPeriod;
        firstPeriod = new Date(year - 1, 7, 1);
        if (month > 6) {
          if (month === H5.Data.thisMonth) {
            secondPeriod = new Date(year - 1, month, H5.Data.thisDay);
          } else {
            secondPeriod = new Date(year - 1, month + 1, 0);
          }
        } else {
          if (month === H5.Data.thisMonth) {
            secondPeriod = new Date(year, month, H5.Data.thisDay);
          } else {
            secondPeriod = new Date(year, month + 1, 0);
          }
        }
        return sumValues(firstPeriod, secondPeriod);
      };
      curValue = sumPeriods(year, month);
      preValue = sumPeriods(year - 1, month);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionAvgRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  chartDailyEmbargo = new H5.Charts.GoogleCharts({
    type: "Line",
    container: "chart-daily-embargo",
    title: "Embargos: Índice Diário",
    buttons: {
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chartDailyEmbargo.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, months, name, options, secondPeriod, _k;
    createTable = (function(_this) {
      return function(state) {
        var day, key, reg, sum, _fn, _k, _ref7, _results;
        sum = 0;
        _results = [];
        for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
          _ref7 = H5.DB.embargo.data.states[state];
          _fn = function(reg) {
            var _ref8;
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.day === day) {
              sum += reg.area;
              return false;
            }
          };
          for (key in _ref7) {
            reg = _ref7[key];
            _fn(reg);
          }
          _results.push(_this.data.setValue(day - 1, 1, Math.round((_this.data.getValue(day - 1, 1) + sum) * 100) / 100));
        }
        return _results;
      };
    })(this);
    this.createDataTable();
    this.data.addColumn("number", "Dia");
    this.data.addColumn("number", "Área");
    daysInMonth = new Date(H5.Data.selectedYear, H5.Data.selectedMonth + 1, 0).getDate();
    firstPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, 1);
    secondPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, daysInMonth);
    data = [];
    for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
      data[0] = day;
      data[1] = 0;
      this.data.addRow(data);
    }
    if (H5.Data.state === "brasil") {
      for (name in H5.DB.embargo.data.states) {
        createTable(name);
      }
    } else {
      createTable(H5.Data.state);
    }
    months = {
      0: "Janeiro",
      1: "Fevereiro",
      2: "Março",
      3: "Abril",
      4: "Maio",
      5: "Junho",
      6: "Julho",
      7: "Agosto",
      8: "Setembro",
      9: "Outubro",
      10: "Novembro",
      11: "Dezembro"
    };
    this.changeTitle("Embargos: Índice Diário [" + months[H5.Data.selectedMonth] + "]");
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      legend: "none",
      chartArea: {
        width: "70%",
        height: "70%"
      },
      colors: ['#3ABCFC'],
      vAxis: {
        title: "Área km²"
      },
      hAxis: {
        title: "Dias",
        gridlines: {
          color: "#CCC",
          count: daysInMonth / 5
        }
      },
      animation: H5.Data.animate
    };
    return this.chart.draw(this.data, options);
  };

  chartMonthlyEmbargo = new H5.Charts.GoogleCharts({
    type: "Area",
    container: "chart-monthly-embargo",
    period: 2,
    title: "Embargos: Índice Mensal",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chartMonthlyEmbargo._addBtn.onclick = function() {
    chartMonthlyEmbargo.options.period++;
    return chartMonthlyEmbargo.drawChart();
  };

  chartMonthlyEmbargo._delBtn.onclick = function() {
    chartMonthlyEmbargo.options.period--;
    return chartMonthlyEmbargo.drawChart();
  };

  chartMonthlyEmbargo.drawChart = function() {
    var data, month, options, sumValues, _k, _l, _ref7, _ref8, _ref9;
    sumValues = function(year, month) {
      var firstPeriod, key, name, reg, secondPeriod, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.embargo.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.month === month) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.embargo.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod) && reg.month === month) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Mês");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      this.data.addColumn("number", H5.Data.periods[i]);
    }
    for (month in H5.Data.months) {
      data = [H5.Data.months[month]];
      month = parseInt(month);
      if ((7 <= (_ref8 = month + 7) && _ref8 <= 11)) {
        month += 7;
      } else {
        month -= 5;
      }
      for (i = _l = 1, _ref9 = this.options.period; 1 <= _ref9 ? _l <= _ref9 : _l >= _ref9; i = 1 <= _ref9 ? ++_l : --_l) {
        data[i] = sumValues(H5.Data.thisProdesYear - i + 1, month);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chartAnnualEmbargo = new H5.Charts.GoogleCharts({
    type: "Bar",
    container: "chart-annual-embargo",
    period: 1,
    title: "Embargos: Índice Períodos",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chartAnnualEmbargo._addBtn.onclick = function() {
    chartAnnualEmbargo.options.period++;
    return chartAnnualEmbargo.drawChart();
  };

  chartAnnualEmbargo._delBtn.onclick = function() {
    chartAnnualEmbargo.options.period--;
    return chartAnnualEmbargo.drawChart();
  };

  chartAnnualEmbargo.drawChart = function() {
    var data, options, sumAvg, sumAvgValues, sumTotal, sumTotalValues, sumValues, _k, _ref7;
    sumValues = function(firstPeriod, secondPeriod) {
      var key, name, reg, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.embargo.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.embargo.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod)) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    sumTotalValues = function(year) {
      var firstPeriod, secondPeriod;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      return sumValues(firstPeriod, secondPeriod);
    };
    sumAvgValues = function(year) {
      var firstPeriod, month, secondPeriod;
      month = H5.Data.selectedMonth;
      firstPeriod = new Date(year - 1, 7, 1);
      if (month > 6) {
        if (month === H5.Data.thisMonth) {
          secondPeriod = new Date(year - 1, month, H5.Data.thisDay);
        } else {
          secondPeriod = new Date(year - 1, month + 1, 0);
        }
      } else {
        if (month === H5.Data.thisMonth) {
          secondPeriod = new Date(year, month, H5.Data.thisDay);
        } else {
          secondPeriod = new Date(year, month + 1, 0);
        }
      }
      return sumValues(firstPeriod, secondPeriod);
    };
    this.createDataTable();
    this.data.addColumn("string", "Ano");
    this.data.addColumn("number", "Parcial");
    this.data.addColumn("number", "Diferença");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k <= _ref7 : _k >= _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      data = [H5.Data.periods[i]];
      sumTotal = sumTotalValues(H5.Data.thisProdesYear - i);
      sumAvg = sumAvgValues(H5.Data.thisProdesYear - i);
      data[1] = sumAvg;
      data[2] = Math.round((sumTotal - sumAvg) * 100) / 100;
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "68%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121'],
      vAxis: {
        title: "Período PRODES"
      },
      hAxis: {
        title: "Área km²"
      },
      bar: {
        groupWidth: "80%"
      },
      isStacked: true,
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods - 1;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  chartStatesEmbargo = new H5.Charts.GoogleCharts({
    type: "Column",
    container: "chart-states-embargo",
    period: 2,
    title: "Embargos: UFs",
    buttons: {
      minusplus: true,
      "export": true,
      table: true,
      minimize: true,
      maximize: true
    }
  });

  chartStatesEmbargo._addBtn.onclick = function() {
    chartStatesEmbargo.options.period++;
    return chartStatesEmbargo.drawChart();
  };

  chartStatesEmbargo._delBtn.onclick = function() {
    chartStatesEmbargo.options.period--;
    return chartStatesEmbargo.drawChart();
  };

  chartStatesEmbargo.drawChart = function() {
    var data, j, name, options, state, sumValues, _k, _l, _m, _ref10, _ref7, _ref8, _ref9;
    sumValues = function(state, year) {
      var firstPeriod, key, reg, secondPeriod, sum, _ref7, _ref8;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      secondPeriod = new Date(year, 7, 0);
      _ref7 = H5.DB.embargo.data.states[state];
      for (key in _ref7) {
        reg = _ref7[key];
        if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
          sum += reg.area;
        }
      }
      return Math.round(sum * 100) / 100;
    };
    this.createDataTable();
    this.data.addColumn("string", "Estado");
    for (i = _k = 0, _ref7 = this.options.period; 0 <= _ref7 ? _k < _ref7 : _k > _ref7; i = 0 <= _ref7 ? ++_k : --_k) {
      this.data.addColumn("number", H5.Data.periods[i]);
    }
    if (H5.Data.state === "brasil") {
      _ref8 = H5.DB.embargo.data.states;
      for (name in _ref8) {
        state = _ref8[name];
        data = [name];
        for (j = _l = 1, _ref9 = this.options.period; 1 <= _ref9 ? _l <= _ref9 : _l >= _ref9; j = 1 <= _ref9 ? ++_l : --_l) {
          data[j] = sumValues(name, H5.Data.thisProdesYear - j + 1);
        }
        this.data.addRow(data);
      }
    } else {
      data = [H5.Data.state];
      for (j = _m = 1, _ref10 = this.options.period; 1 <= _ref10 ? _m <= _ref10 : _m >= _ref10; j = 1 <= _ref10 ? ++_m : --_m) {
        data[j] = sumValues(H5.Data.state, H5.Data.thisProdesYear - j + 1);
      }
      this.data.addRow(data);
    }
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "76%"
      },
      colors: ['#3ABCFC', '#FC2121', '#D0FC3F', '#FCAC0A', '#67C2EF', '#FF5454', '#CBE968', '#FABB3D', '#77A4BD', '#CC6C6C', '#A6B576', '#C7A258'],
      bar: {
        groupWidth: "100%"
      },
      vAxis: {
        title: "Área km²"
      },
      animation: H5.Data.animate
    };
    this._addBtn.disabled = true;
    this._delBtn.disabled = true;
    google.visualization.events.addListener(this.chart, "ready", (function(_this) {
      return function() {
        _this._addBtn.disabled = _this.options.period > H5.Data.totalPeriods;
        return _this._delBtn.disabled = _this.options.period < 2;
      };
    })(this));
    return this.chart.draw(this.data, options);
  };

  sparkTVAAEmbargo = new H5.Charts.Knobs({
    container: "spark-tvaa-embargo",
    title: "Taxa VAA",
    popover: "Taxa de variação em relação ao mesmo mês do ano anterior"
  });

  sparkTVAAEmbargo.drawChart = function() {
    var periodDeforesttionRate, value;
    periodDeforesttionRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref7, _ref8;
        sum = 0;
        if (H5.Data.state === "brasil") {
          for (state in H5.DB.embargo.data.states) {
            for (reg in H5.DB.embargo.data.states[state]) {
              reg = H5.DB.embargo.data.states[state][reg];
              if ((date.getFullYear() <= (_ref7 = reg.year) && _ref7 <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in H5.DB.embargo.data.states[H5.Data.state]) {
            reg = H5.DB.embargo.data.states[H5.Data.state][reg];
            if ((date.getFullYear() <= (_ref8 = reg.year) && _ref8 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year - 1, month);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  sparkTVMAEmbargo = new H5.Charts.Knobs({
    container: "spark-tvma-embargo",
    title: "Taxa VMA",
    popover: "Taxa de variação em relação ao mês anterior"
  });

  sparkTVMAEmbargo.drawChart = function() {
    var periodDeforesttionRate, value;
    periodDeforesttionRate = function(year, month) {
      var curDate, curValue, preDate, preValue, sumValues;
      sumValues = function(date) {
        var reg, state, sum, _ref7, _ref8;
        sum = 0;
        if (H5.Data.state === "brasil") {
          for (state in H5.DB.embargo.data.states) {
            for (reg in H5.DB.embargo.data.states[state]) {
              reg = H5.DB.embargo.data.states[state][reg];
              if ((date.getFullYear() <= (_ref7 = reg.year) && _ref7 <= date.getFullYear()) && reg.month === date.getMonth()) {
                sum += reg.area;
              }
            }
          }
        } else {
          for (reg in H5.DB.embargo.data.states[H5.Data.state]) {
            reg = H5.DB.embargo.data.states[H5.Data.state][reg];
            if ((date.getFullYear() <= (_ref8 = reg.year) && _ref8 <= date.getFullYear()) && reg.month === date.getMonth()) {
              sum += reg.area;
            }
          }
        }
        return sum;
      };
      curDate = new Date(year, month);
      preDate = new Date(year, month - 1);
      curValue = sumValues(curDate);
      preValue = sumValues(preDate);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  sparkTVPAEmbargo = new H5.Charts.Knobs({
    container: "spark-tvpa-embargo",
    title: "Taxa VPA",
    popover: "Taxa de variação em relação ao período PRODES anterior"
  });

  sparkTVPAEmbargo.drawChart = function() {
    var periodDeforesttionAvgRate, value;
    periodDeforesttionAvgRate = function(year, month) {
      var curValue, preValue, sumPeriods, sumValues;
      sumValues = function(firstPeriod, secondPeriod) {
        var key, name, reg, state, sum, _ref10, _ref7, _ref8, _ref9;
        sum = 0;
        if (H5.Data.state === "brasil") {
          _ref7 = H5.DB.embargo.data.states;
          for (name in _ref7) {
            state = _ref7[name];
            for (key in state) {
              reg = state[key];
              if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod)) {
                sum += reg.area;
              }
            }
          }
        } else {
          _ref9 = H5.DB.embargo.data.states[H5.Data.state];
          for (key in _ref9) {
            reg = _ref9[key];
            if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod)) {
              sum += reg.area;
            }
          }
        }
        return Math.round(sum * 100) / 100;
      };
      if (month > 6) {
        year++;
      } else {
        year;
      }
      sumPeriods = function(year, month) {
        var firstPeriod, secondPeriod;
        firstPeriod = new Date(year - 1, 7, 1);
        if (month > 6) {
          if (month === H5.Data.thisMonth) {
            secondPeriod = new Date(year - 1, month, H5.Data.thisDay);
          } else {
            secondPeriod = new Date(year - 1, month + 1, 0);
          }
        } else {
          if (month === H5.Data.thisMonth) {
            secondPeriod = new Date(year, month, H5.Data.thisDay);
          } else {
            secondPeriod = new Date(year, month + 1, 0);
          }
        }
        return sumValues(firstPeriod, secondPeriod);
      };
      curValue = sumPeriods(year, month);
      preValue = sumPeriods(year - 1, month);
      if (preValue === 0) {
        return 0;
      } else {
        return Math.round((curValue - preValue) / preValue * 100);
      }
    };
    value = periodDeforesttionAvgRate(H5.Data.selectedYear, H5.Data.selectedMonth);
    return this.updateInfo(value);
  };

  sparkMonthlyEmbargo = new H5.Charts.Sparks({
    container: "spark-monthly-embargo",
    title: "Total Mensal"
  });

  sparkMonthlyEmbargo.drawChart = function() {
    var createTable, data, day, daysInMonth, firstPeriod, name, secondPeriod, state, value, _k, _ref7;
    createTable = (function(_this) {
      return function(state) {
        var day, dayValue, key, reg, _fn, _k, _ref7, _results;
        dayValue = 0;
        _results = [];
        for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
          _ref7 = H5.DB.embargo.data.states[state];
          _fn = function(reg) {
            var _ref8;
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.day === day) {
              dayValue += reg.area;
              return false;
            }
          };
          for (key in _ref7) {
            reg = _ref7[key];
            _fn(reg);
          }
          _results.push(data[day - 1] = Math.round((data[day - 1] + dayValue) * 100) / 100);
        }
        return _results;
      };
    })(this);
    daysInMonth = new Date(H5.Data.selectedYear, H5.Data.selectedMonth + 1, 0).getDate();
    firstPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, 1);
    secondPeriod = new Date(H5.Data.selectedYear, H5.Data.selectedMonth, daysInMonth);
    data = [];
    for (day = _k = 1; 1 <= daysInMonth ? _k <= daysInMonth : _k >= daysInMonth; day = 1 <= daysInMonth ? ++_k : --_k) {
      data[day - 1] = 0;
    }
    if (H5.Data.state === "brasil") {
      _ref7 = H5.DB.embargo.data.states;
      for (name in _ref7) {
        state = _ref7[name];
        createTable(name);
      }
    } else {
      createTable(H5.Data.state);
    }
    value = data[daysInMonth - 1];
    return this.updateInfo(data, value);
  };

  sparkAnnualEmbargo = new H5.Charts.Sparks({
    container: "spark-annual-embargo",
    title: "Total Período"
  });

  sparkAnnualEmbargo.drawChart = function() {
    var count, data, month, sumValues, value, year, _ref7;
    sumValues = function(year, month) {
      var firstPeriod, key, name, reg, secondPeriod, state, sum, _ref10, _ref7, _ref8, _ref9;
      sum = 0;
      firstPeriod = new Date(year - 1, 7, 1);
      if (month > 6) {
        secondPeriod = new Date(year - 1, month + 1, 0);
      } else if (month !== H5.Data.thisMonth) {
        secondPeriod = new Date(year, month + 1, 0);
      } else {
        secondPeriod = new Date(year, month, H5.Data.thisDay);
      }
      if (H5.Data.state === "brasil") {
        _ref7 = H5.DB.embargo.data.states;
        for (name in _ref7) {
          state = _ref7[name];
          for (key in state) {
            reg = state[key];
            if ((firstPeriod <= (_ref8 = reg.date) && _ref8 <= secondPeriod) && reg.month === month) {
              sum += reg.area;
            }
          }
        }
      } else {
        _ref9 = H5.DB.embargo.data.states[H5.Data.state];
        for (key in _ref9) {
          reg = _ref9[key];
          if ((firstPeriod <= (_ref10 = reg.date) && _ref10 <= secondPeriod) && reg.month === month) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    data = [];
    for (month in H5.Data.months) {
      month = parseInt(month);
      year = H5.Data.selectedMonth < 7 ? H5.Data.selectedYear : H5.Data.selectedYear + 1;
      count = parseInt(H5.Data.selectedMonth);
      if (count >= 7) {
        count -= 7;
      } else {
        count += 5;
      }
      if (month <= count) {
        if ((7 <= (_ref7 = month + 7) && _ref7 <= 11)) {
          month += 7;
        } else {
          month -= 5;
        }
        data.push(sumValues(year, month));
      } else {
        data.push(0);
      }
    }
    value = 0;
    $.each(data, function() {
      return value += this;
    });
    return this.updateInfo(data, Math.round(value * 100) / 100);
  };

  reloadChartsDeter = function() {
    chart1.drawChart();
    chart2.drawChart();
    chart3.drawChart();
    chart4.drawChart();
    chart5.drawChart();
    chart6.drawChart();
    chart7.drawChart();
    chart8.drawChart();
    chart9.drawChart();
    knob1.drawChart();
    knob2.drawChart();
    knob3.drawChart();
    spark1.drawChart();
    return spark2.drawChart();
  };

  reloadChartsEmbargos = function() {
    chartDailyEmbargo.drawChart();
    chartMonthlyEmbargo.drawChart();
    chartAnnualEmbargo.drawChart();
    chartStatesEmbargo.drawChart();
    sparkTVAAEmbargo.drawChart();
    sparkTVMAEmbargo.drawChart();
    sparkTVPAEmbargo.drawChart();
    sparkAnnualEmbargo.drawChart();
    return sparkMonthlyEmbargo.drawChart();
  };

  selectYears = document.getElementById('yearsSlct');

  selectMonths = document.getElementById('monthsSlct');

  selectType = document.getElementById('typeSlct');

  chartsDeter = document.getElementById('charts-deter');

  chartsEmbargo = document.getElementById('charts-embargo');

  sparksDeter = document.getElementById('sparks-deter');

  sparksEmbargo = document.getElementById('sparks-embargo');

  $(chartsEmbargo).hide();

  $(sparksEmbargo).hide();

  selectedYear = H5.Data.thisMonth < 7 ? H5.Data.totalPeriods + 1 : H5.Data.totalPeriods;

  selectYears.options[selectedYear].selected = true;

  selectMonths.options[H5.Data.thisMonth].selected = true;

  $(selectMonths).on("change", function(e) {
    e.preventDefault();
    H5.Data.selectedMonth = parseInt(selectMonths.value);
    if (H5.Data.selectedType === "embargos") {
      return reloadChartsEmbargos();
    } else {
      chart1.drawChart();
      chart3.drawChart();
      chart8.drawChart();
      knob1.drawChart();
      knob2.drawChart();
      knob3.drawChart();
      spark1.drawChart();
      return spark2.drawChart();
    }
  });

  $(selectYears).on("change", function(e) {
    e.preventDefault();
    H5.Data.selectedYear = parseInt(selectYears.value);
    if (H5.Data.selectedType === "embargos") {
      reloadChartsEmbargos();
    } else {
      chart1.drawChart();
      chart3.drawChart();
      chart8.drawChart();
      knob1.drawChart();
      knob2.drawChart();
      knob3.drawChart();
      spark1.drawChart();
      spark2.drawChart();
    }
    return H5.Data.changed = true;
  });

  _ref7 = H5.Data.regions.names;
  for (_k = 0, _len = _ref7.length; _k < _len; _k++) {
    region = _ref7[_k];
    $("#" + region).hide();
  }

  _ref8 = H5.Data.regions.amazonia;
  for (_l = 0, _len1 = _ref8.length; _l < _len1; _l++) {
    state = _ref8[_l];
    $("#" + state).show();
  }

  $(selectType).on("change", function(e) {
    var _len10, _len11, _len12, _len13, _len14, _len15, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref20, _ref21, _ref22, _ref9, _s, _t, _u, _v, _w, _x, _y, _z;
    e.preventDefault();
    if (this.value === "deter") {
      _ref9 = H5.Data.regions.names;
      for (_m = 0, _len2 = _ref9.length; _m < _len2; _m++) {
        region = _ref9[_m];
        $("#" + region).hide();
      }
      _ref10 = H5.Data.regions.norte;
      for (_n = 0, _len3 = _ref10.length; _n < _len3; _n++) {
        state = _ref10[_n];
        $("#" + state).hide();
      }
      _ref11 = H5.Data.regions.sul;
      for (_o = 0, _len4 = _ref11.length; _o < _len4; _o++) {
        state = _ref11[_o];
        $("#" + state).hide();
      }
      _ref12 = H5.Data.regions.nordeste;
      for (_p = 0, _len5 = _ref12.length; _p < _len5; _p++) {
        state = _ref12[_p];
        $("#" + state).hide();
      }
      _ref13 = H5.Data.regions.sudeste;
      for (_q = 0, _len6 = _ref13.length; _q < _len6; _q++) {
        state = _ref13[_q];
        $("#" + state).hide();
      }
      _ref14 = H5.Data.regions.centrooeste;
      for (_r = 0, _len7 = _ref14.length; _r < _len7; _r++) {
        state = _ref14[_r];
        $("#" + state).hide();
      }
      _ref15 = H5.Data.regions.amazonia;
      for (_s = 0, _len8 = _ref15.length; _s < _len8; _s++) {
        state = _ref15[_s];
        $("#" + state).show();
      }
      $(chartsEmbargo).hide();
      $(sparksEmbargo).hide();
      $(chartsDeter).show();
      $(sparksDeter).show();
      $("#brasil").addClass("active");
      H5.Data.state = "brasil";
      reloadChartsDeter();
    } else if (this.value === "embargos") {
      _ref16 = H5.Data.regions.names;
      for (_t = 0, _len9 = _ref16.length; _t < _len9; _t++) {
        region = _ref16[_t];
        $("#" + region).show();
      }
      _ref17 = H5.Data.regions.norte;
      for (_u = 0, _len10 = _ref17.length; _u < _len10; _u++) {
        state = _ref17[_u];
        $("#" + state).hide();
      }
      _ref18 = H5.Data.regions.sul;
      for (_v = 0, _len11 = _ref18.length; _v < _len11; _v++) {
        state = _ref18[_v];
        $("#" + state).hide();
      }
      _ref19 = H5.Data.regions.nordeste;
      for (_w = 0, _len12 = _ref19.length; _w < _len12; _w++) {
        state = _ref19[_w];
        $("#" + state).hide();
      }
      _ref20 = H5.Data.regions.sudeste;
      for (_x = 0, _len13 = _ref20.length; _x < _len13; _x++) {
        state = _ref20[_x];
        $("#" + state).hide();
      }
      _ref21 = H5.Data.regions.centrooeste;
      for (_y = 0, _len14 = _ref21.length; _y < _len14; _y++) {
        state = _ref21[_y];
        $("#" + state).hide();
      }
      $("#brasil").show();
      $(chartsDeter).hide();
      $(sparksDeter).hide();
      $(chartsEmbargo).show();
      $(sparksEmbargo).show();
      _ref22 = H5.Data.regions.names;
      for (_z = 0, _len15 = _ref22.length; _z < _len15; _z++) {
        region = _ref22[_z];
        $("#" + region).children("i").prop("class", "icon-" + region);
        $("#" + region).removeClass("active");
        $("#brasil").addClass("active");
        H5.Data.state = "brasil";
      }
      reloadChartsEmbargos();
    }
    return H5.Data.selectedType = this.value;
  });

  lastSelectedRegion = "";

  $("#quick1 a").on("click", function(e) {
    var displayRegion, enableRegion, regionToggle, _len2, _m, _ref9;
    e.preventDefault();
    if (H5.Data.state === this.id) {
      return;
    }
    H5.Data.state = this.id;
    $(this).each(function() {
      return $("a").removeClass("active");
    });
    if (H5.Data.selectedType === "embargos") {
      regionToggle = function(regions, fastHide) {
        var _len2, _m, _results;
        _results = [];
        for (_m = 0, _len2 = regions.length; _m < _len2; _m++) {
          region = regions[_m];
          if (fastHide) {
            _results.push($("#" + region).toggle());
          } else {
            _results.push($("#" + region).fadeToggle(300));
          }
        }
        return _results;
      };
      displayRegion = function(region) {
        regionToggle(H5.Data.regions.names, true);
        regionToggle(region);
        lastSelectedRegion = H5.Data.state;
        return $("#brasil").hide();
      };
      enableRegion = function(region, name) {
        var iconElement;
        regionToggle(region, true);
        $("#" + name).addClass("active");
        iconElement = $("#" + name).children("i");
        iconElement.prop("class", "icon-" + H5.Data.state.toLowerCase());
        return $("#brasil").show();
      };
      _ref9 = H5.Data.regions.names;
      for (_m = 0, _len2 = _ref9.length; _m < _len2; _m++) {
        region = _ref9[_m];
        $("#" + region).children("i").prop("class", "icon-" + region);
      }
      switch (H5.Data.state) {
        case "norte":
          return displayRegion(H5.Data.regions.norte);
        case "nordeste":
          return displayRegion(H5.Data.regions.nordeste);
        case "sul":
          return displayRegion(H5.Data.regions.sul);
        case "sudeste":
          return displayRegion(H5.Data.regions.sudeste);
        case "centrooeste":
          return displayRegion(H5.Data.regions.centrooeste);
        case "brasil":
          $(this).addClass("active");
          return reloadChartsEmbargos();
        default:
          switch (lastSelectedRegion) {
            case "norte":
              enableRegion(H5.Data.regions.norte, "norte");
              break;
            case "nordeste":
              enableRegion(H5.Data.regions.nordeste, "nordeste");
              break;
            case "sul":
              enableRegion(H5.Data.regions.sul, "sul");
              break;
            case "sudeste":
              enableRegion(H5.Data.regions.sudeste, "sudeste");
              break;
            case "centrooeste":
              enableRegion(H5.Data.regions.centrooeste, "centrooeste");
          }
          regionToggle(H5.Data.regions.names);
          return reloadChartsEmbargos();
      }
    } else {
      $(this).addClass("active");
      reloadChartsDeter();
      return H5.Data.changed = true;
    }
  });

  $(document).ready(function() {
    chart10.drawChart();
    chart11.drawChart();
    chart12.drawChart();
    $("[rel=tooltip]").tooltip({
      placement: "bottom"
    });
    $(".alert").alert();
    reloadChartsDeter();
    $("#charts-content").masonry({
      itemSelector: ".chart",
      animationOptions: {
        duration: 1000
      }
    });
    return $("#prodes").hide();
  });

}).call(this);
