var hash5LayerControl = L.Control.extend({
  options: {
    collapsed: true,
    position: 'topright',
    autoZIndex: true
  },

  initialize: function (baseLayers, options) {
    L.setOptions(this, options);

    this._layers = {};
    this._lastZIndex = 0;
    this._handlingClick = false;

		for (var i in baseLayers) {
			this._addLayer(baseLayers[i], i);
		}
  },

  onAdd: function (map) {
    this._initLayout();
    this._update();

    map
    .on('layeradd', this._onLayerChange, this)
    .on('layerremove', this._onLayerChange, this);

    return this._container;
  },

  onRemove: function (map) {
    map
    .off('layeradd', this._onLayerChange)
    .off('layerremove', this._onLayerChange);
  },

  addLayer: function (layer, name) {
    this._addLayer(layer, name);
    this._update();
    return this;
  },

  removeLayer: function (layer) {
    var id = L.stamp(layer);
    delete this._layers[id];
    this._update();
    return this;
  },

  _initLayout: function () {
    var className = 'leaflet-control-layers',
    container = this._container = L.DomUtil.create('div', className);

    if (!L.Browser.touch) {
      L.DomEvent.disableClickPropagation(container);
      L.DomEvent.on(container, 'mousewheel', L.DomEvent.stopPropagation);
    } else {
      L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation);
    }

    var form = this._form = L.DomUtil.create('form', className + '-list form-layer-list');

    if (this.options.collapsed) {
      L.DomEvent
      .on(container, 'mouseover', this._expand, this)
      .on(container, 'mouseout', this._collapse, this);

      var link = this._layersLink = L.DomUtil.create('a', className + '-toggle', container);
      link.href = '#';
      link.title = 'Layers';

      if (L.Browser.touch) {
        L.DomEvent
        .on(link, 'click', L.DomEvent.stopPropagation)
        .on(link, 'click', L.DomEvent.preventDefault)
        .on(link, 'click', this._expand, this);
      }
      else {
        L.DomEvent.on(link, 'focus', this._expand, this);
      }

      this._map.on('movestart', this._collapse, this);
    } else {
      this._expand();
    }

    this._baseLayersList = L.DomUtil.create('div', className + '-base', form);

    container.appendChild(form);
  },

  _addLayer: function (layer, name) {
    var id = L.stamp(layer);

    this._layers[id] = {
      layer: layer,
      name: name
    };

    if (this.options.autoZIndex && layer.setZIndex) {
      this._lastZIndex++;
      layer.setZIndex(this._lastZIndex);
    }
  },

  _update: function () {
    if (!this._container) {
      return;
    }

    this._baseLayersList.innerHTML = '';

    var i, obj;

    for (i in this._layers) {
      obj = this._layers[i];
      this._addItem(obj);
    }
  },

  _onLayerChange: function (e) {
    var id = L.stamp(e.layer);

    if (this._layers[id] && !this._handlingClick) {
      this._update();
    }
  },

  _addItem: function (obj) {
      var _this = this,
        container = this._baseLayersList;

      var controlgroup = L.DomUtil.create('div', 'control-group', container);
      checked = this._map.hasLayer(obj.layer);

      var label = L.DomUtil.create('label', 'control-label pull-left', controlgroup);
      label.innerHTML = ' ' + obj.name;

      var control = L.DomUtil.create('div', 'control pull-right', controlgroup);

      var toggle = L.DomUtil.create('div', 'switch switch-small', control);

      var input = L.DomUtil.create('input', 'leaflet-control-layers-selector', toggle);
      input.type = 'checkbox';
      input.defaultChecked = checked;
      input.layerId = L.stamp(obj.layer);

      $(toggle).bootstrapSwitch();
      $(toggle).on('switch-change', function(e, data){
        _this._onInputClick(input, obj);
      });

      return controlgroup;
  },

  _onInputClick: function (input, obj) {

    this._handlingClick = true;

    if (input.checked) {
      this._map.addLayer(obj.layer);
      this._map.fire('layeradd', {layer: obj});
    } else {
      this._map.removeLayer(obj.layer);
      this._map.fire('layerremove', {layer: obj});
    }

    this._handlingClick = false;
  },

  _expand: function () {
    L.DomUtil.addClass(this._container, 'leaflet-control-layers-expanded');
  },

  _collapse: function () {
    this._container.className = this._container.className.replace(' leaflet-control-layers-expanded', '');
  }
});

var bingaerial = new L.BingLayer("AsyRHq25Hv8jQbrAIVSeZEifWbP6s1nq1RQfDeUf0ycdHogebEL7W2dxgFmPJc9h", {
  type: 'Aerial',
  attribution: ''
});

var bingroad = new L.BingLayer("AsyRHq25Hv8jQbrAIVSeZEifWbP6s1nq1RQfDeUf0ycdHogebEL7W2dxgFmPJc9h", {
  type: 'Road',
  attribution: ''
});

var binghybrid = new L.BingLayer("AsyRHq25Hv8jQbrAIVSeZEifWbP6s1nq1RQfDeUf0ycdHogebEL7W2dxgFmPJc9h", {
  type: 'AerialWithLabels',
  attribution: ''
});

var openstreetUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
openstreetAttribution = '',
openstreet = new L.TileLayer(openstreetUrl, {
  maxZoom : 18,
  attribution : openstreetAttribution
});

var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png', cloudmadeAttribution = '', cloudmade = new L.TileLayer(cloudmadeUrl, {
  maxZoom : 18,
  attribution : cloudmadeAttribution
});


var map = new L.Map('map-container', {
  center : new L.LatLng(-10.0, -58.0),
  zoom : 6,
  layers : [openstreet],
  zoomControl : true
});

// display stations
var alertaLayer = new lvector.PRWSF({
  url: "../painel/rest/",
  geotable: "alerta",
  fields: "objectid",
  srid: 4618,
  geomFieldName: 'shape',
  showAll: true,
  popupTemplate: '<div class="iw-content"><center><h3>{objectid}</h3></center></div>',
  singlePopup: true,
  where: "ano = '2013'",
  symbology: {
    type: "single",
    vectorOptions: {
      fillColor: "#ff0000",
      fillOpacity: 0.6,
      weight: 1.2,
      color: "#ff0000",
      opacity: 0.8
    }
  }
});

alertaLayer.setMap(map);
function processTMS(data) {
  function onEachFeature(feature, layer) {

    var popupContent = "<p>I started out as a GeoJSON " +
      feature.geometry.type + ", but now I'm a Leaflet vector!</p>";

    if (feature.properties && feature.properties.popupContent) {
      popupContent += feature.properties.popupContent;
    }

    layer.bindPopup(popupContent);

    layer.on("mouseover click", function(e){
      // get the tile URL
      var tmsUrl = feature.properties.url_tiles + "{z}/{x}/{y}.png";

      // remove border
      layer.setStyle({fillColor: 'transparent', stroke: false});

      // check if the layer is already loaded
      function checkLayer(layerId) {
        for(i = 0; i < rapidEye.listLayers.length; i++){
          if (layerId === rapidEye.listLayers[i]) {
            return false;
          }
        }
        return true;
      }

      if(checkLayer(layer._leaflet_id)) {
        // add tile inside polygon
        rapidEye.layers[rapidEye.count].setUrl(tmsUrl);
        rapidEye.layers[rapidEye.count].redraw();

        // add layer id to the list of layers
        rapidEye.listLayers.push(layer._leaflet_id);

        // compare if number of tiles is bigger then the
        // number of layers
        if(rapidEye.listLayers.length > rapidEye.numberOfLayers)
          rapidEye.listLayers.shift();

        // make next tile avaliable
        rapidEye.count++;

        // if the tile number is bigger then the number of layers
        // reset the controller
        if(rapidEye.count > rapidEye.numberOfLayers) {
          rapidEye.count = 1;
        }
      }
    });
    // restore style when leave
    layer.on("mouseout", function(e){
      // restore style
      layer.setStyle({stroke: true});
    });
  }

  // create object for the tiles
  var rapidEye = {};
  rapidEye.count = 1;
  rapidEye.listLayers = [];
  rapidEye.layers = {};
  rapidEye.layerGroup = [];
  rapidEye.numberOfLayers = 4;

  // create number of layers to display the tms
  for(i=1; i<=rapidEye.numberOfLayers; i++){
    rapidEye.layers[i] = new L.TileLayer("", {
      minZoom: 3,
      maxZoom: 17,
      tms: true
    });
    // add layer to list of layers
    rapidEye.layerGroup.push(rapidEye.layers[i]);
  }

  // load geojson data
  rapidEye.geoJson = L.geoJson(data,{
    style: {
      fillColor: 'transparent',
      color: 'purple',
      weight: 4
    },
    onEachFeature: onEachFeature
  });

  // create a group of layers and add then to the layers list
  var rapidEyeTMS = new L.LayerGroup(rapidEye.layerGroup);
  rapidEyeTMS.addLayer(rapidEye.geoJson);
  layersList.addLayer(rapidEyeTMS, "RapidEye");
}

$.getJSON("geojson/rapideye/pampas.json", function(data){
  processTMS(data);
});

var layersList = new hash5LayerControl({
  "OSM" : openstreet,
  "Bing Aerial" : bingaerial,
  "Bing Road" : bingroad,
  "Bing Hybrid" : binghybrid
});

// add layer menu
map.addControl(layersList);
// add custom attribution
map.attributionControl.setPrefix('Hexgis Hash5');
// add scale
L.control.scale().addTo(map);
