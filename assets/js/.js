// Generated by CoffeeScript 1.6.1
(function() {
  var Hash5Charts, chart1, curYear, drawChartArea, estados, i, months, periodos, selectedState, tableData, today, totalPeriodos, updateCharts, _i;

  selectedState = "Todos";

  today = new Date();

  curYear = today.getFullYear();

  totalPeriodos = today.getFullYear() - 2005;

  periodos = new Array(totalPeriodos);

  for (i = _i = 0; 0 <= totalPeriodos ? _i <= totalPeriodos : _i >= totalPeriodos; i = 0 <= totalPeriodos ? ++_i : --_i) {
    periodos[i] = (today.getFullYear() - i - 1) + "-" + (today.getFullYear() - i);
  }

  months = {
    7: "Ago",
    8: "Set",
    9: "Out",
    10: "Nov",
    11: "Dez",
    0: "Jan",
    1: "Fev",
    2: "Mar",
    3: "Abr",
    4: "Mai",
    5: "Jun",
    6: "Jul"
  };

  estados = ["AC", "AM", "AP", "MA", "MT", "PA", "RO", "RR", "TO"];

  tableData = {
    init: function() {
      var estado, _j, _len, _results;
      this.states = {};
      _results = [];
      for (_j = 0, _len = estados.length; _j < _len; _j++) {
        estado = estados[_j];
        _results.push(this.states[estado] = {});
      }
      return _results;
    },
    populate: function(state, date, value) {
      var convertDate, self;
      convertDate = function(dateStr) {
        var dArr;
        dateStr = String(dateStr);
        dArr = dateStr.split("-");
        return new Date(dArr[0], dArr[1] - 1, dArr[2]);
      };
      self = this.states[state];
      self[date] = {};
      self[date].area = value;
      self[date].date = convertDate(date);
      self[date].year = convertDate(date).getFullYear();
      self[date].month = convertDate(date).getMonth();
      return self[date].day = convertDate(date).getDate();
    }
  };

  $.ajax({
    type: "GET",
    url: "../siscom/rest/v1/ws_geo_attributequery.php",
    data: {
      table: "alerta_acumulado_diario"
    },
    dataType: "jsonp",
    success: function(data) {
      tableData.init();
      return $.each(data, function(i, properties) {
        return tableData.populate(properties.estado, properties.data, parseFloat(properties.total));
      });
    },
    error: function(error, status, desc) {
      return console.log(status, desc);
    }
  });

  updateCharts = function() {
    return drawChartArea();
  };

  chart1 = new Hash5Charts({
    type: "Area",
    container: "chart1",
    period: 2,
    started: true,
    title: "Demo",
    buttons: {
      minusplus: true,
      minimize: true,
      maximize: true,
      close: true
    }
  });

  chart1.createContainer();

  drawChartArea = function() {
    var options, sumValues, _j, _ref;
    sumValues = function(date, month) {
      var firstPeriod, reg, secondPeriod, state, sum, _ref, _ref1;
      sum = 0;
      firstPeriod = new Date(date - 1, 7, 1);
      secondPeriod = new Date(date, 7, 0);
      if (selectedState === "Todos") {
        for (state in tableData.states) {
          for (reg in tableData.states[state]) {
            reg = tableData.states[state][reg];
            if ((firstPeriod <= (_ref = reg.date) && _ref <= secondPeriod) && reg.month === month) {
              sum += reg.area;
            }
          }
        }
      } else {
        for (reg in tableData.states[selectedState]) {
          reg = tableData.states[selectedState][reg];
          if ((firstPeriod <= (_ref1 = reg.date) && _ref1 <= secondPeriod) && reg.month === month) {
            sum += reg.area;
          }
        }
      }
      return Math.round(sum * 100) / 100;
    };
    chart1.dataTable();
    if (chart1.options.started) {
      chart1.createChart();
    }
    chart1.data.addColumn("string", "mes");
    for (i = _j = 0, _ref = chart1.options.period; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      chart1.data.addColumn("number", periodos[i]);
    }
    $.each(months, function(key, value) {
      var dataContent, j, _k, _ref1;
      dataContent = [value];
      for (j = _k = 1, _ref1 = chart1.data.getNumberOfColumns() - 1; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; j = 1 <= _ref1 ? ++_k : --_k) {
        dataContent[j] = sumValues(curYear - j + 1, key);
      }
      return chart1.data.addRow(dataContent);
    });
    options = {
      title: "",
      titleTextStyle: {
        color: "#333",
        fontSize: 13
      },
      backgroundColor: "transparent",
      focusTarget: "category",
      chartArea: {
        width: "70%",
        height: "80%"
      },
      vAxis: {
        title: "Área Km2"
      },
      animation: {
        duration: 500,
        easing: "inAndOut"
      }
    };
    chart1.addBtn.disabled = true;
    chart1.delBtn.disabled = true;
    google.visualization.events.addListener(chart1.chart, "ready", function() {
      chart1.addBtn.disabled = (chart1.data.getNumberOfColumns() - 1) > totalPeriodos;
      return chart1.delBtn.disabled = (chart1.data.getNumberOfColumns() - 1) < 2;
    });
    return chart1.chart.draw(chart1.data, options);
  };

  google.setOnLoadCallback(drawChartArea);

  google.load("visualization", "1", {
    packages: ["corechart"]
  });

  google.load("visualization", "1", {
    packages: ["gauge"]
  });

  Hash5Charts = (function() {

    function Hash5Charts(options) {
      this.options = $.extend(this.options, options);
    }

    Hash5Charts.prototype.options = {
      type: null,
      container: null,
      period: 1,
      started: true,
      title: "",
      fullscreen: false,
      defaultClass: "",
      selects: {},
      buttons: {
        minusplus: false,
        minimize: false,
        maximize: false,
        close: false
      }
    };

    Hash5Charts.prototype.createChart = function() {
      this.chart = new google.visualization[this.options.type + "Chart"](document.getElementById("chart-" + this.options.container));
      this.options.started = false;
    };

    Hash5Charts.prototype.createContainer = function() {
      var container, html;
      container = document.getElementById(this.options.container);
      html = "<div class=\"chart-header\">";
      html += "<div class=\"btn-group chart-icon btn-left\"></div>";
      html += "<h2>" + this.options.title + "</h2>";
      html += "<div class=\"btn-group chart-icon btn-right\"></div></div>";
      html += "<div id=\"chart-" + this.options.container + "\" class=\"chart-content\"></div>";
      $(container).append(html);
      if (this.options.buttons.minimize) {
        html = "<button class=\"btn btn-minimize\"><i class=\"icon-chevron-up\"></i></button>";
      }
      if (this.options.buttons.maximize) {
        html += "<button class=\"btn btn-maximize\"><i class=\"icon-resize-full\"></i></button>";
      }
      if (this.options.buttons.close) {
        html += "<button class=\"btn btn-close\"><i class=\"icon-remove\"></i></button>";
      }
      $(container).children().children(".btn-right").append(html);
      this.enableButtons(container);
      if (this.options.buttons.minusplus) {
        html = "<span class=\"break\"></span>";
        $(container).children().children("h2").prepend(html);
        html = "<button id=\"" + this.options.container + "-minus\" class=\"btn\"> <i class=\"icon-minus\"></i> </button>";
        html += "<button id=\"" + this.options.container + "-plus\" class=\"btn\"> <i class=\"icon-plus\"></i> </button>";
        $(container).children().children(".btn-left").append(html);
        this.delBtn = document.getElementById(this.options.container + "-minus");
        this.addBtn = document.getElementById(this.options.container + "-plus");
      } else if (this.options.selects) {
        html = "<span class=\"break\"></span>";
        $(container).children().children("h2").prepend(html);
        html = "<form name=\"form-" + this.options.container + "\" class=\"form-inline\" action=\"\">";
        $.each(this.options.selects, function(name, data) {
          html += "<select class=\"input-mini\" name=\"" + name + "\">";
          $.each(data, function(key, value) {
            html += "<option value=" + key + ">" + value + "</option>";
          });
          html += "</select>";
        });
        $(container).children().children(".btn-left").append(html);
        $(container).children().children(".btn-left").removeClass("btn-group");
      }
    };

    Hash5Charts.prototype.dataTable = function() {
      this.data = new google.visualization.DataTable();
    };

    Hash5Charts.prototype.enableButtons = function(container) {
      var defaultClass,
        _this = this;
      defaultClass = "";
      if (this.options.buttons.minimize) {
        $(container).on("click", ".btn-minimize", function(event) {
          var $content;
          event.preventDefault();
          container = document.getElementById(_this.options.container);
          $content = $(container).children().next(".chart-content");
          if ($content.is(":visible")) {
            $("i", $(_this)).removeClass("icon-chevron-up").addClass("icon-chevron-down");
          } else {
            $("i", $(_this)).removeClass("icon-chevron-down").addClass("icon-chevron-up");
          }
          $content.slideToggle();
        });
      }
      if (this.options.buttons.maximize) {
        $(container).on("click", ".btn-maximize", function(event) {
          var $close, $container, $content, $maximize, $minimize;
          event.preventDefault();
          container = document.getElementById(this.options.container);
          $container = $(this).parent().parent().parent();
          $content = $container.children().next(".chart-content");
          $maximize = $container.children().children().children("button.btn-maximize").children('i');
          $minimize = $container.children().children().children("button.btn-minimize");
          $close = $container.children().children().children("button.btn-close");
          if ($maximize[0].className === 'icon-resize-full') {
            defaultClass = $container[0].className;
            $minimize.prop("disabled", true);
            $close.prop("disabled", true);
            $maximize.prop("class", "icon-resize-small");
            $("#navbar").hide();
          } else {
            $minimize.prop("disabled", false);
            $close.prop("disabled", false);
            $maximize.prop("class", "icon-resize-full");
            $("#navbar").show();
          }
          $content.toggleClass("chart-content-overlay");
          $content.hide();
          setTimeout((function() {
            return $content.fadeToggle(500);
          }), 200);
          $container.toggleClass(defaultClass);
          $container.toggleClass("chart-overlay");
          setTimeout((function() {
            return updateCharts();
          }), 300);
        });
      }
      if (this.options.buttons.close) {
        $(container).on("click", ".btn-close", function(event) {
          event.preventDefault();
          $(this).parent().parent().parent().fadeOut();
        });
      }
    };

    return Hash5Charts;

  })();

}).call(this);
